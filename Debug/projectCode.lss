
projectCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001aba  00001b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080011e  0080011e  00001b6c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001734  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe0  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f1a  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00005450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008de  00000000  00000000  0000598c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000964  00000000  00000000  0000626a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_1>
       8:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_2>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <uart_transmit_byte+0x6>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	11 e0       	ldi	r17, 0x01	; 1
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ea eb       	ldi	r30, 0xBA	; 186
      e6:	fa e1       	ldi	r31, 0x1A	; 26
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	ae 31       	cpi	r26, 0x1E	; 30
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	ae e1       	ldi	r26, 0x1E	; 30
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ac 32       	cpi	r26, 0x2C	; 44
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 8a 05 	call	0xb14	; 0xb14 <main>
     108:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <inst_pow>:
uint32_t inst_power;
uint16_t second_v;

/*returns the instantaneous power using linear approximation*/
static void inst_pow(uint16_t first_v, uint16_t offset_voltage_count)
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	2c 97       	sbiw	r28, 0x0c	; 12
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	9a 87       	std	Y+10, r25	; 0x0a
     126:	89 87       	std	Y+9, r24	; 0x09
     128:	7c 87       	std	Y+12, r23	; 0x0c
     12a:	6b 87       	std	Y+11, r22	; 0x0b
    uint16_t current_r = adc_convert_channel(CURRENT_CHANNEL);
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <adc_convert_channel>
     132:	9a 83       	std	Y+2, r25	; 0x02
     134:	89 83       	std	Y+1, r24	; 0x01
    second_v = adc_convert_channel(VOLTAGE_CHANNEL);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	0e 94 61 03 	call	0x6c2	; 0x6c2 <adc_convert_channel>
     13c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <second_v+0x1>
     140:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <second_v>

    uint16_t avg_voltage = (first_v + second_v)/2;
     144:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <second_v>
     148:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <second_v+0x1>
     14c:	89 85       	ldd	r24, Y+9	; 0x09
     14e:	9a 85       	ldd	r25, Y+10	; 0x0a
     150:	82 0f       	add	r24, r18
     152:	93 1f       	adc	r25, r19
     154:	96 95       	lsr	r25
     156:	87 95       	ror	r24
     158:	9c 83       	std	Y+4, r25	; 0x04
     15a:	8b 83       	std	Y+3, r24	; 0x03

    int16_t avg_voltage_unshift =  avg_voltage - offset_voltage_count;
     15c:	2b 81       	ldd	r18, Y+3	; 0x03
     15e:	3c 81       	ldd	r19, Y+4	; 0x04
     160:	8b 85       	ldd	r24, Y+11	; 0x0b
     162:	9c 85       	ldd	r25, Y+12	; 0x0c
     164:	a9 01       	movw	r20, r18
     166:	48 1b       	sub	r20, r24
     168:	59 0b       	sbc	r21, r25
     16a:	ca 01       	movw	r24, r20
     16c:	9e 83       	std	Y+6, r25	; 0x06
     16e:	8d 83       	std	Y+5, r24	; 0x05
    avg_voltage_unshift *= V_COUNT_TO_VOLTS;
     170:	2d 81       	ldd	r18, Y+5	; 0x05
     172:	3e 81       	ldd	r19, Y+6	; 0x06
     174:	44 e6       	ldi	r20, 0x64	; 100
     176:	42 9f       	mul	r20, r18
     178:	c0 01       	movw	r24, r0
     17a:	43 9f       	mul	r20, r19
     17c:	90 0d       	add	r25, r0
     17e:	11 24       	eor	r1, r1
     180:	9e 83       	std	Y+6, r25	; 0x06
     182:	8d 83       	std	Y+5, r24	; 0x05

    int16_t current_r_unshift = current_r - offset_voltage_count;
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	3a 81       	ldd	r19, Y+2	; 0x02
     188:	8b 85       	ldd	r24, Y+11	; 0x0b
     18a:	9c 85       	ldd	r25, Y+12	; 0x0c
     18c:	a9 01       	movw	r20, r18
     18e:	48 1b       	sub	r20, r24
     190:	59 0b       	sbc	r21, r25
     192:	ca 01       	movw	r24, r20
     194:	98 87       	std	Y+8, r25	; 0x08
     196:	8f 83       	std	Y+7, r24	; 0x07
	current_r_unshift *= I_COUNT_TO_AMPS;
     198:	8f 81       	ldd	r24, Y+7	; 0x07
     19a:	98 85       	ldd	r25, Y+8	; 0x08
     19c:	88 0f       	add	r24, r24
     19e:	99 1f       	adc	r25, r25
     1a0:	82 95       	swap	r24
     1a2:	92 95       	swap	r25
     1a4:	90 7f       	andi	r25, 0xF0	; 240
     1a6:	98 27       	eor	r25, r24
     1a8:	80 7f       	andi	r24, 0xF0	; 240
     1aa:	98 27       	eor	r25, r24
     1ac:	98 87       	std	Y+8, r25	; 0x08
     1ae:	8f 83       	std	Y+7, r24	; 0x07
    current_r_unshift /= 10; /*convert to same units multiplier as voltage*/
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	2a e0       	ldi	r18, 0x0A	; 10
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	b9 01       	movw	r22, r18
     1ba:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divmodhi4>
     1be:	cb 01       	movw	r24, r22
     1c0:	98 87       	std	Y+8, r25	; 0x08
     1c2:	8f 83       	std	Y+7, r24	; 0x07
    
    inst_power = ((int32_t)avg_voltage_unshift * (int32_t)current_r_unshift);
     1c4:	8d 81       	ldd	r24, Y+5	; 0x05
     1c6:	9e 81       	ldd	r25, Y+6	; 0x06
     1c8:	9c 01       	movw	r18, r24
     1ca:	99 0f       	add	r25, r25
     1cc:	44 0b       	sbc	r20, r20
     1ce:	55 0b       	sbc	r21, r21
     1d0:	8f 81       	ldd	r24, Y+7	; 0x07
     1d2:	98 85       	ldd	r25, Y+8	; 0x08
     1d4:	09 2e       	mov	r0, r25
     1d6:	00 0c       	add	r0, r0
     1d8:	aa 0b       	sbc	r26, r26
     1da:	bb 0b       	sbc	r27, r27
     1dc:	bc 01       	movw	r22, r24
     1de:	cd 01       	movw	r24, r26
     1e0:	0e 94 98 09 	call	0x1330	; 0x1330 <__mulsi3>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <inst_power>
     1ec:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <inst_power+0x1>
     1f0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <inst_power+0x2>
     1f4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <inst_power+0x3>

}
     1f8:	00 00       	nop
     1fa:	2c 96       	adiw	r28, 0x0c	; 12
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <get_avg_power>:

/*returns average power by first principles (average of instantaneous powers*/
uint16_t get_avg_power(uint16_t offset_voltage_count)
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	2b 97       	sbiw	r28, 0x0b	; 11
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	9b 87       	std	Y+11, r25	; 0x0b
     222:	8a 87       	std	Y+10, r24	; 0x0a
	uint16_t first_v = adc_convert_channel(VOLTAGE_CHANNEL);
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	0e 94 61 03 	call	0x6c2	; 0x6c2 <adc_convert_channel>
     22a:	9a 83       	std	Y+2, r25	; 0x02
     22c:	89 83       	std	Y+1, r24	; 0x01
	int32_t power_sum = 0;
     22e:	1b 82       	std	Y+3, r1	; 0x03
     230:	1c 82       	std	Y+4, r1	; 0x04
     232:	1d 82       	std	Y+5, r1	; 0x05
     234:	1e 82       	std	Y+6, r1	; 0x06
	
	for(uint8_t i=0; i < (WAVE_NUM * SAMPLES_PER_WAVE); i++){
     236:	1f 82       	std	Y+7, r1	; 0x07
     238:	24 c0       	rjmp	.+72     	; 0x282 <get_avg_power+0x76>
		inst_pow(first_v, offset_voltage_count);
     23a:	2a 85       	ldd	r18, Y+10	; 0x0a
     23c:	3b 85       	ldd	r19, Y+11	; 0x0b
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	b9 01       	movw	r22, r18
     244:	0e 94 88 00 	call	0x110	; 0x110 <inst_pow>
		power_sum += (inst_power);
     248:	2b 81       	ldd	r18, Y+3	; 0x03
     24a:	3c 81       	ldd	r19, Y+4	; 0x04
     24c:	4d 81       	ldd	r20, Y+5	; 0x05
     24e:	5e 81       	ldd	r21, Y+6	; 0x06
     250:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <inst_power>
     254:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <inst_power+0x1>
     258:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <inst_power+0x2>
     25c:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <inst_power+0x3>
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	a4 1f       	adc	r26, r20
     266:	b5 1f       	adc	r27, r21
     268:	8b 83       	std	Y+3, r24	; 0x03
     26a:	9c 83       	std	Y+4, r25	; 0x04
     26c:	ad 83       	std	Y+5, r26	; 0x05
     26e:	be 83       	std	Y+6, r27	; 0x06
		/*the second voltage which is set by inst pow needs to be used for the next 
		voltage interpolation*/
		first_v = second_v;
     270:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <second_v>
     274:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <second_v+0x1>
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
uint16_t get_avg_power(uint16_t offset_voltage_count)
{
	uint16_t first_v = adc_convert_channel(VOLTAGE_CHANNEL);
	int32_t power_sum = 0;
	
	for(uint8_t i=0; i < (WAVE_NUM * SAMPLES_PER_WAVE); i++){
     27c:	8f 81       	ldd	r24, Y+7	; 0x07
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	8f 83       	std	Y+7, r24	; 0x07
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	89 33       	cpi	r24, 0x39	; 57
     286:	c8 f2       	brcs	.-78     	; 0x23a <get_avg_power+0x2e>
		voltage interpolation*/
		first_v = second_v;
	}
	
	/*divide by thousand converts to W * 10^3*/
	uint16_t avg_power_mw = (uint16_t) (power_sum/ (WAVE_NUM * SAMPLES_PER_WAVE)/1000);
     288:	8b 81       	ldd	r24, Y+3	; 0x03
     28a:	9c 81       	ldd	r25, Y+4	; 0x04
     28c:	ad 81       	ldd	r26, Y+5	; 0x05
     28e:	be 81       	ldd	r27, Y+6	; 0x06
     290:	28 ea       	ldi	r18, 0xA8	; 168
     292:	3e ed       	ldi	r19, 0xDE	; 222
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	bc 01       	movw	r22, r24
     29a:	cd 01       	movw	r24, r26
     29c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__divmodsi4>
     2a0:	da 01       	movw	r26, r20
     2a2:	c9 01       	movw	r24, r18
     2a4:	99 87       	std	Y+9, r25	; 0x09
     2a6:	88 87       	std	Y+8, r24	; 0x08
	return avg_power_mw;
     2a8:	88 85       	ldd	r24, Y+8	; 0x08
     2aa:	99 85       	ldd	r25, Y+9	; 0x09
}
     2ac:	2b 96       	adiw	r28, 0x0b	; 11
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <get_rms_current>:
#include "../conversions.h"
#include "../constants.h"
#include <math.h>

/*returns rms current in 10^-4 A  by first principles*/ 
uint16_t get_rms_current(uint16_t offset_voltage_count){
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	29 97       	sbiw	r28, 0x09	; 9
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	99 87       	std	Y+9, r25	; 0x09
     2d4:	88 87       	std	Y+8, r24	; 0x08
	uint32_t i_rms = 0;
     2d6:	19 82       	std	Y+1, r1	; 0x01
     2d8:	1a 82       	std	Y+2, r1	; 0x02
     2da:	1b 82       	std	Y+3, r1	; 0x03
     2dc:	1c 82       	std	Y+4, r1	; 0x04

	for (uint8_t i = 0; i < SAMPLES_PER_WAVE * WAVE_NUM; i++){
     2de:	1d 82       	std	Y+5, r1	; 0x05
     2e0:	2d c0       	rjmp	.+90     	; 0x33c <get_rms_current+0x7e>
		/* we want to calculate rms without offset as the offset changes the rms. Our original current signal does not have an offset*/
		int16_t sample = adc_convert_channel(CURRENT_CHANNEL) - offset_voltage_count;
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <adc_convert_channel>
     2e8:	9c 01       	movw	r18, r24
     2ea:	88 85       	ldd	r24, Y+8	; 0x08
     2ec:	99 85       	ldd	r25, Y+9	; 0x09
     2ee:	a9 01       	movw	r20, r18
     2f0:	48 1b       	sub	r20, r24
     2f2:	59 0b       	sbc	r21, r25
     2f4:	ca 01       	movw	r24, r20
     2f6:	9f 83       	std	Y+7, r25	; 0x07
     2f8:	8e 83       	std	Y+6, r24	; 0x06
		i_rms += (uint32_t) sample* (uint32_t) sample ;
     2fa:	8e 81       	ldd	r24, Y+6	; 0x06
     2fc:	9f 81       	ldd	r25, Y+7	; 0x07
     2fe:	9c 01       	movw	r18, r24
     300:	99 0f       	add	r25, r25
     302:	44 0b       	sbc	r20, r20
     304:	55 0b       	sbc	r21, r21
     306:	8e 81       	ldd	r24, Y+6	; 0x06
     308:	9f 81       	ldd	r25, Y+7	; 0x07
     30a:	09 2e       	mov	r0, r25
     30c:	00 0c       	add	r0, r0
     30e:	aa 0b       	sbc	r26, r26
     310:	bb 0b       	sbc	r27, r27
     312:	bc 01       	movw	r22, r24
     314:	cd 01       	movw	r24, r26
     316:	0e 94 98 09 	call	0x1330	; 0x1330 <__mulsi3>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	ab 81       	ldd	r26, Y+3	; 0x03
     324:	bc 81       	ldd	r27, Y+4	; 0x04
     326:	82 0f       	add	r24, r18
     328:	93 1f       	adc	r25, r19
     32a:	a4 1f       	adc	r26, r20
     32c:	b5 1f       	adc	r27, r21
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	9a 83       	std	Y+2, r25	; 0x02
     332:	ab 83       	std	Y+3, r26	; 0x03
     334:	bc 83       	std	Y+4, r27	; 0x04

/*returns rms current in 10^-4 A  by first principles*/ 
uint16_t get_rms_current(uint16_t offset_voltage_count){
	uint32_t i_rms = 0;

	for (uint8_t i = 0; i < SAMPLES_PER_WAVE * WAVE_NUM; i++){
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	8f 5f       	subi	r24, 0xFF	; 255
     33a:	8d 83       	std	Y+5, r24	; 0x05
     33c:	8d 81       	ldd	r24, Y+5	; 0x05
     33e:	89 33       	cpi	r24, 0x39	; 57
     340:	80 f2       	brcs	.-96     	; 0x2e2 <get_rms_current+0x24>
		/* we want to calculate rms without offset as the offset changes the rms. Our original current signal does not have an offset*/
		int16_t sample = adc_convert_channel(CURRENT_CHANNEL) - offset_voltage_count;
		i_rms += (uint32_t) sample* (uint32_t) sample ;
	}

	i_rms /= (SAMPLES_PER_WAVE * WAVE_NUM);
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	ab 81       	ldd	r26, Y+3	; 0x03
     348:	bc 81       	ldd	r27, Y+4	; 0x04
     34a:	29 e3       	ldi	r18, 0x39	; 57
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	bc 01       	movw	r22, r24
     354:	cd 01       	movw	r24, r26
     356:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
     35a:	da 01       	movw	r26, r20
     35c:	c9 01       	movw	r24, r18
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	9a 83       	std	Y+2, r25	; 0x02
     362:	ab 83       	std	Y+3, r26	; 0x03
     364:	bc 83       	std	Y+4, r27	; 0x04
	i_rms = sqrt(i_rms) ;
     366:	69 81       	ldd	r22, Y+1	; 0x01
     368:	7a 81       	ldd	r23, Y+2	; 0x02
     36a:	8b 81       	ldd	r24, Y+3	; 0x03
     36c:	9c 81       	ldd	r25, Y+4	; 0x04
     36e:	0e 94 c8 07 	call	0xf90	; 0xf90 <__floatunsisf>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	bc 01       	movw	r22, r24
     378:	cd 01       	movw	r24, r26
     37a:	0e 94 08 09 	call	0x1210	; 0x1210 <sqrt>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	bc 01       	movw	r22, r24
     384:	cd 01       	movw	r24, r26
     386:	0e 94 99 07 	call	0xf32	; 0xf32 <__fixunssfsi>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	89 83       	std	Y+1, r24	; 0x01
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	ab 83       	std	Y+3, r26	; 0x03
     394:	bc 83       	std	Y+4, r27	; 0x04
	i_rms = convert_count_to_i_rms(i_rms); // convert to 10^4 A
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	0e 94 05 03 	call	0x60a	; 0x60a <convert_count_to_i_rms>
     39e:	cc 01       	movw	r24, r24
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	89 83       	std	Y+1, r24	; 0x01
     3a6:	9a 83       	std	Y+2, r25	; 0x02
     3a8:	ab 83       	std	Y+3, r26	; 0x03
     3aa:	bc 83       	std	Y+4, r27	; 0x04


	return (uint16_t) i_rms;
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	29 96       	adiw	r28, 0x09	; 9
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <get_offset_voltage>:
#include "../constants.h"
#include "offset_voltage.h"

/* returns average of offset counts*/
uint16_t get_offset_voltage()
{
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <get_offset_voltage+0x16>
     3d8:	00 d0       	rcall	.+0      	; 0x3da <get_offset_voltage+0x18>
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
	uint32_t offset_voltage = 0;
     3e0:	19 82       	std	Y+1, r1	; 0x01
     3e2:	1a 82       	std	Y+2, r1	; 0x02
     3e4:	1b 82       	std	Y+3, r1	; 0x03
     3e6:	1c 82       	std	Y+4, r1	; 0x04
	for (uint8_t i=0; i < OFFSET_SAMPLES; i++){
     3e8:	1d 82       	std	Y+5, r1	; 0x05
     3ea:	15 c0       	rjmp	.+42     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		offset_voltage += adc_convert_channel(OFFSET_VOLTAGE_CHANNEL);
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	0e 94 61 03 	call	0x6c2	; 0x6c2 <adc_convert_channel>
     3f2:	cc 01       	movw	r24, r24
     3f4:	a0 e0       	ldi	r26, 0x00	; 0
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	29 81       	ldd	r18, Y+1	; 0x01
     3fa:	3a 81       	ldd	r19, Y+2	; 0x02
     3fc:	4b 81       	ldd	r20, Y+3	; 0x03
     3fe:	5c 81       	ldd	r21, Y+4	; 0x04
     400:	82 0f       	add	r24, r18
     402:	93 1f       	adc	r25, r19
     404:	a4 1f       	adc	r26, r20
     406:	b5 1f       	adc	r27, r21
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	ab 83       	std	Y+3, r26	; 0x03
     40e:	bc 83       	std	Y+4, r27	; 0x04

/* returns average of offset counts*/
uint16_t get_offset_voltage()
{
	uint32_t offset_voltage = 0;
	for (uint8_t i=0; i < OFFSET_SAMPLES; i++){
     410:	8d 81       	ldd	r24, Y+5	; 0x05
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	8d 83       	std	Y+5, r24	; 0x05
     416:	8d 81       	ldd	r24, Y+5	; 0x05
     418:	85 30       	cpi	r24, 0x05	; 5
     41a:	40 f3       	brcs	.-48     	; 0x3ec <get_offset_voltage+0x2a>
		offset_voltage += adc_convert_channel(OFFSET_VOLTAGE_CHANNEL);
	}
	offset_voltage /= OFFSET_SAMPLES;
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	ab 81       	ldd	r26, Y+3	; 0x03
     422:	bc 81       	ldd	r27, Y+4	; 0x04
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	2d ec       	ldi	r18, 0xCD	; 205
     42a:	3c ec       	ldi	r19, 0xCC	; 204
     42c:	4c ec       	ldi	r20, 0xCC	; 204
     42e:	5c ec       	ldi	r21, 0xCC	; 204
     430:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__umulsidi3>
     434:	a2 2e       	mov	r10, r18
     436:	b3 2e       	mov	r11, r19
     438:	c4 2e       	mov	r12, r20
     43a:	d5 2e       	mov	r13, r21
     43c:	e6 2e       	mov	r14, r22
     43e:	f7 2e       	mov	r15, r23
     440:	08 2f       	mov	r16, r24
     442:	19 2f       	mov	r17, r25
     444:	2a 2d       	mov	r18, r10
     446:	3b 2d       	mov	r19, r11
     448:	4c 2d       	mov	r20, r12
     44a:	5d 2d       	mov	r21, r13
     44c:	6e 2d       	mov	r22, r14
     44e:	7f 2d       	mov	r23, r15
     450:	80 2f       	mov	r24, r16
     452:	91 2f       	mov	r25, r17
     454:	00 e2       	ldi	r16, 0x20	; 32
     456:	0e 94 49 0a 	call	0x1492	; 0x1492 <__lshrdi3>
     45a:	a2 2e       	mov	r10, r18
     45c:	b3 2e       	mov	r11, r19
     45e:	c4 2e       	mov	r12, r20
     460:	d5 2e       	mov	r13, r21
     462:	e6 2e       	mov	r14, r22
     464:	f7 2e       	mov	r15, r23
     466:	08 2f       	mov	r16, r24
     468:	19 2f       	mov	r17, r25
     46a:	d6 01       	movw	r26, r12
     46c:	c5 01       	movw	r24, r10
     46e:	b6 95       	lsr	r27
     470:	a7 95       	ror	r26
     472:	97 95       	ror	r25
     474:	87 95       	ror	r24
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	ab 83       	std	Y+3, r26	; 0x03
     484:	bc 83       	std	Y+4, r27	; 0x04
	return offset_voltage;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
}
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	df 90       	pop	r13
     4a2:	cf 90       	pop	r12
     4a4:	bf 90       	pop	r11
     4a6:	af 90       	pop	r10
     4a8:	08 95       	ret

000004aa <get_pf>:
#include "pf.h"
#include "../drivers/timer.h"
#include "../constants.h"

/*returns 1000 * power factor*/
uint16_t get_pf(){
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	2e 97       	sbiw	r28, 0x0e	; 14
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
    float time = get_timer_count() * CLOCK_PERIOD; 
     4be:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <get_timer_count>
     4c2:	cc 01       	movw	r24, r24
     4c4:	a0 e0       	ldi	r26, 0x00	; 0
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	bc 01       	movw	r22, r24
     4ca:	cd 01       	movw	r24, r26
     4cc:	0e 94 c8 07 	call	0xf90	; 0xf90 <__floatunsisf>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	2f e6       	ldi	r18, 0x6F	; 111
     4d6:	32 e1       	ldi	r19, 0x12	; 18
     4d8:	43 e8       	ldi	r20, 0x83	; 131
     4da:	58 e3       	ldi	r21, 0x38	; 56
     4dc:	bc 01       	movw	r22, r24
     4de:	cd 01       	movw	r24, r26
     4e0:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	89 83       	std	Y+1, r24	; 0x01
     4ea:	9a 83       	std	Y+2, r25	; 0x02
     4ec:	ab 83       	std	Y+3, r26	; 0x03
     4ee:	bc 83       	std	Y+4, r27	; 0x04
	/*since the period is 1ms we do not need to divide by the period */
    float theta = time * 2 * PI; /*angle in radians*/
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	ab 81       	ldd	r26, Y+3	; 0x03
     4f6:	bc 81       	ldd	r27, Y+4	; 0x04
     4f8:	9c 01       	movw	r18, r24
     4fa:	ad 01       	movw	r20, r26
     4fc:	bc 01       	movw	r22, r24
     4fe:	cd 01       	movw	r24, r26
     500:	0e 94 28 07 	call	0xe50	; 0xe50 <__addsf3>
     504:	dc 01       	movw	r26, r24
     506:	cb 01       	movw	r24, r22
     508:	20 ed       	ldi	r18, 0xD0	; 208
     50a:	3f e0       	ldi	r19, 0x0F	; 15
     50c:	49 e4       	ldi	r20, 0x49	; 73
     50e:	50 e4       	ldi	r21, 0x40	; 64
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	8d 83       	std	Y+5, r24	; 0x05
     51e:	9e 83       	std	Y+6, r25	; 0x06
     520:	af 83       	std	Y+7, r26	; 0x07
     522:	b8 87       	std	Y+8, r27	; 0x08
    float pf_f = cos(theta);
     524:	8d 81       	ldd	r24, Y+5	; 0x05
     526:	9e 81       	ldd	r25, Y+6	; 0x06
     528:	af 81       	ldd	r26, Y+7	; 0x07
     52a:	b8 85       	ldd	r27, Y+8	; 0x08
     52c:	bc 01       	movw	r22, r24
     52e:	cd 01       	movw	r24, r26
     530:	0e 94 94 07 	call	0xf28	; 0xf28 <cos>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	9a 87       	std	Y+10, r25	; 0x0a
     53c:	ab 87       	std	Y+11, r26	; 0x0b
     53e:	bc 87       	std	Y+12, r27	; 0x0c
    uint16_t pf = pf_f * 100;
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	48 ec       	ldi	r20, 0xC8	; 200
     546:	52 e4       	ldi	r21, 0x42	; 66
     548:	69 85       	ldd	r22, Y+9	; 0x09
     54a:	7a 85       	ldd	r23, Y+10	; 0x0a
     54c:	8b 85       	ldd	r24, Y+11	; 0x0b
     54e:	9c 85       	ldd	r25, Y+12	; 0x0c
     550:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	bc 01       	movw	r22, r24
     55a:	cd 01       	movw	r24, r26
     55c:	0e 94 99 07 	call	0xf32	; 0xf32 <__fixunssfsi>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	9e 87       	std	Y+14, r25	; 0x0e
     566:	8d 87       	std	Y+13, r24	; 0x0d
    return pf;
     568:	8d 85       	ldd	r24, Y+13	; 0x0d
     56a:	9e 85       	ldd	r25, Y+14	; 0x0e
}
     56c:	2e 96       	adiw	r28, 0x0e	; 14
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <get_v_peak>:
#include "../constants.h"
#include "../drivers/adc.h"

/*returns V peak in 10^2 Volts*/
uint16_t get_v_peak(uint16_t offset_voltage_count)
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	29 97       	sbiw	r28, 0x09	; 9
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	99 87       	std	Y+9, r25	; 0x09
     594:	88 87       	std	Y+8, r24	; 0x08
	uint16_t sample;
	uint16_t sample_amplitude;
	uint16_t max_sample_amplitude = 0;
     596:	1a 82       	std	Y+2, r1	; 0x02
     598:	19 82       	std	Y+1, r1	; 0x01

	
	for (uint8_t i=0; i < SAMPLES_PER_WAVE * WAVE_NUM; i++) {
     59a:	1b 82       	std	Y+3, r1	; 0x03
     59c:	22 c0       	rjmp	.+68     	; 0x5e2 <get_v_peak+0x64>
		sample = adc_convert_channel(VOLTAGE_CHANNEL);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <adc_convert_channel>
     5a4:	9d 83       	std	Y+5, r25	; 0x05
     5a6:	8c 83       	std	Y+4, r24	; 0x04
		//get maximum amplitude (may be negative part of wave)
		sample_amplitude = abs(offset_voltage_count - sample);
     5a8:	28 85       	ldd	r18, Y+8	; 0x08
     5aa:	39 85       	ldd	r19, Y+9	; 0x09
     5ac:	8c 81       	ldd	r24, Y+4	; 0x04
     5ae:	9d 81       	ldd	r25, Y+5	; 0x05
     5b0:	a9 01       	movw	r20, r18
     5b2:	48 1b       	sub	r20, r24
     5b4:	59 0b       	sbc	r21, r25
     5b6:	ca 01       	movw	r24, r20
     5b8:	99 23       	and	r25, r25
     5ba:	1c f4       	brge	.+6      	; 0x5c2 <get_v_peak+0x44>
     5bc:	91 95       	neg	r25
     5be:	81 95       	neg	r24
     5c0:	91 09       	sbc	r25, r1
     5c2:	9f 83       	std	Y+7, r25	; 0x07
     5c4:	8e 83       	std	Y+6, r24	; 0x06

		if (sample_amplitude > max_sample_amplitude) {
     5c6:	2e 81       	ldd	r18, Y+6	; 0x06
     5c8:	3f 81       	ldd	r19, Y+7	; 0x07
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	82 17       	cp	r24, r18
     5d0:	93 07       	cpc	r25, r19
     5d2:	20 f4       	brcc	.+8      	; 0x5dc <get_v_peak+0x5e>
			max_sample_amplitude = sample_amplitude;
     5d4:	8e 81       	ldd	r24, Y+6	; 0x06
     5d6:	9f 81       	ldd	r25, Y+7	; 0x07
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 83       	std	Y+1, r24	; 0x01
	uint16_t sample;
	uint16_t sample_amplitude;
	uint16_t max_sample_amplitude = 0;

	
	for (uint8_t i=0; i < SAMPLES_PER_WAVE * WAVE_NUM; i++) {
     5dc:	8b 81       	ldd	r24, Y+3	; 0x03
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	8b 83       	std	Y+3, r24	; 0x03
     5e2:	8b 81       	ldd	r24, Y+3	; 0x03
     5e4:	89 33       	cpi	r24, 0x39	; 57
     5e6:	d8 f2       	brcs	.-74     	; 0x59e <get_v_peak+0x20>
		if (sample_amplitude > max_sample_amplitude) {
			max_sample_amplitude = sample_amplitude;
		}
	}
	
	return convert_count_to_v_peak(max_sample_amplitude + offset_voltage_count);
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	3a 81       	ldd	r19, Y+2	; 0x02
     5ec:	88 85       	ldd	r24, Y+8	; 0x08
     5ee:	99 85       	ldd	r25, Y+9	; 0x09
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	0e 94 20 03 	call	0x640	; 0x640 <convert_count_to_v_peak>
}
     5f8:	29 96       	adiw	r28, 0x09	; 9
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <convert_count_to_i_rms>:
	return millivolts;
}


uint16_t convert_count_to_i_rms(uint16_t adc_count)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <convert_count_to_i_rms+0x6>
     610:	00 d0       	rcall	.+0      	; 0x612 <convert_count_to_i_rms+0x8>
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	9c 83       	std	Y+4, r25	; 0x04
     618:	8b 83       	std	Y+3, r24	; 0x03

	uint16_t i_rms = adc_count * 34;
     61a:	2b 81       	ldd	r18, Y+3	; 0x03
     61c:	3c 81       	ldd	r19, Y+4	; 0x04
     61e:	42 e2       	ldi	r20, 0x22	; 34
     620:	42 9f       	mul	r20, r18
     622:	c0 01       	movw	r24, r0
     624:	43 9f       	mul	r20, r19
     626:	90 0d       	add	r25, r0
     628:	11 24       	eor	r1, r1
     62a:	9a 83       	std	Y+2, r25	; 0x02
     62c:	89 83       	std	Y+1, r24	; 0x01
	return i_rms;
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
}
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <convert_count_to_v_peak>:

uint16_t convert_count_to_v_peak(uint16_t adc_count)
{
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	00 d0       	rcall	.+0      	; 0x646 <convert_count_to_v_peak+0x6>
     646:	00 d0       	rcall	.+0      	; 0x648 <convert_count_to_v_peak+0x8>
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	8b 83       	std	Y+3, r24	; 0x03
	//uint16_t adc_voltage = convert_adc_count_to_mv(adc_count);
	//uint16_t v_peak = (uint16_t)((uint32_t)((adc_voltage - VOLTAGE_OFFSET_MV) * DIVIDER_RATIO)/1024);
	
	uint16_t v_peak = (uint16_t) (((uint32_t) ((uint32_t) adc_count * (uint32_t) 1024))/ (uint32_t) 282);
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	9c 81       	ldd	r25, Y+4	; 0x04
     654:	cc 01       	movw	r24, r24
     656:	a0 e0       	ldi	r26, 0x00	; 0
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	07 2e       	mov	r0, r23
     65c:	7a e0       	ldi	r23, 0x0A	; 10
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	aa 1f       	adc	r26, r26
     664:	bb 1f       	adc	r27, r27
     666:	7a 95       	dec	r23
     668:	d1 f7       	brne	.-12     	; 0x65e <convert_count_to_v_peak+0x1e>
     66a:	70 2d       	mov	r23, r0
     66c:	2a e1       	ldi	r18, 0x1A	; 26
     66e:	31 e0       	ldi	r19, 0x01	; 1
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
     67c:	da 01       	movw	r26, r20
     67e:	c9 01       	movw	r24, r18
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
	return v_peak;
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
}
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <adc_initialise>:
#include <avr/io.h>
#include "adc.h"

void adc_initialise(void)
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
	/* set AVCC (5V) as ADC voltage reference*/
	ADMUX = 0x40;
     69e:	8c e7       	ldi	r24, 0x7C	; 124
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	20 e4       	ldi	r18, 0x40	; 64
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18
	/* set ADC clock prescaler to 128*/ 
	ADCSRA = 0x87;
     6a8:	8a e7       	ldi	r24, 0x7A	; 122
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	27 e8       	ldi	r18, 0x87	; 135
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
	ADCSRB = 0x00;
     6b2:	8b e7       	ldi	r24, 0x7B	; 123
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	fc 01       	movw	r30, r24
     6b8:	10 82       	st	Z, r1
}
     6ba:	00 00       	nop
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <adc_convert_channel>:

uint16_t adc_convert_channel(uint8_t channel)
{
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <adc_convert_channel+0x6>
     6c8:	1f 92       	push	r1
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	8b 83       	std	Y+3, r24	; 0x03
	// Set channel
	ADMUX &= 0xF0;
     6d0:	8c e7       	ldi	r24, 0x7C	; 124
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	2c e7       	ldi	r18, 0x7C	; 124
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	f9 01       	movw	r30, r18
     6da:	20 81       	ld	r18, Z
     6dc:	20 7f       	andi	r18, 0xF0	; 240
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
	ADMUX |= channel;
     6e2:	8c e7       	ldi	r24, 0x7C	; 124
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	2c e7       	ldi	r18, 0x7C	; 124
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	30 81       	ld	r19, Z
     6ee:	2b 81       	ldd	r18, Y+3	; 0x03
     6f0:	23 2b       	or	r18, r19
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18

	//Start Conversion
	ADCSRA |= (1 << ADSC);
     6f6:	8a e7       	ldi	r24, 0x7A	; 122
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	2a e7       	ldi	r18, 0x7A	; 122
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	f9 01       	movw	r30, r18
     700:	20 81       	ld	r18, Z
     702:	20 64       	ori	r18, 0x40	; 64
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18

	//wait for conversion to finish
	while((ADCSRA & (1 << ADIF)) == 0){
     708:	00 00       	nop
     70a:	8a e7       	ldi	r24, 0x7A	; 122
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	fc 01       	movw	r30, r24
     710:	80 81       	ld	r24, Z
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	80 71       	andi	r24, 0x10	; 16
     718:	99 27       	eor	r25, r25
     71a:	89 2b       	or	r24, r25
     71c:	b1 f3       	breq	.-20     	; 0x70a <adc_convert_channel+0x48>
		;
	}

	// Get ADC value
	uint16_t adc_value = (ADCL << 0) | (ADCH << 8);
     71e:	88 e7       	ldi	r24, 0x78	; 120
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	28 2f       	mov	r18, r24
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	89 e7       	ldi	r24, 0x79	; 121
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	fc 01       	movw	r30, r24
     730:	80 81       	ld	r24, Z
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	98 2f       	mov	r25, r24
     738:	88 27       	eor	r24, r24
     73a:	82 2b       	or	r24, r18
     73c:	93 2b       	or	r25, r19
     73e:	9a 83       	std	Y+2, r25	; 0x02
     740:	89 83       	std	Y+1, r24	; 0x01

	return adc_value;
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
}
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <__vector_1>:

/* ensure variable is accessible by ISR */
volatile uint16_t timer_count = 0;

/*current zero crossing interrupt*/
ISR(INT0_vect){
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	8f 93       	push	r24
     760:	9f 93       	push	r25
     762:	ef 93       	push	r30
     764:	ff 93       	push	r31
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     76e:	84 e8       	ldi	r24, 0x84	; 132
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	11 82       	std	Z+1, r1	; 0x01
     776:	10 82       	st	Z, r1
}
     778:	00 00       	nop
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	9f 91       	pop	r25
     784:	8f 91       	pop	r24
     786:	0f 90       	pop	r0
     788:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_2>:

/*voltage zero crossing interrupt*/
ISR(INT1_vect){
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
	timer_count = TCNT1;
     7ae:	84 e8       	ldi	r24, 0x84	; 132
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
     7bc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	TCNT1 = 0;
     7c0:	84 e8       	ldi	r24, 0x84	; 132
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	11 82       	std	Z+1, r1	; 0x01
     7c8:	10 82       	st	Z, r1
}
     7ca:	00 00       	nop
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	9f 91       	pop	r25
     7d6:	8f 91       	pop	r24
     7d8:	0f 90       	pop	r0
     7da:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <get_timer_count>:

uint16_t get_timer_count(){
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
	return timer_count;
     7ec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     7f0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <timer_initialise_TC0>:

// initialise timer 0 (8 bit) with a 1 millisecond range
void timer_initialise_TC0()
{
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;
     802:	84 e4       	ldi	r24, 0x44	; 68
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	fc 01       	movw	r30, r24
     808:	10 82       	st	Z, r1
	TCCR0B = 0b00000011;
     80a:	85 e4       	ldi	r24, 0x45	; 69
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	23 e0       	ldi	r18, 0x03	; 3
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
	OCR0A = 250;
     814:	87 e4       	ldi	r24, 0x47	; 71
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	2a ef       	ldi	r18, 0xFA	; 250
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18
}
     81e:	00 00       	nop
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <extint_init>:

/* initialise zero crossing interrupts*/
void extint_init(uint8_t pin){
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	1f 92       	push	r1
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	89 83       	std	Y+1, r24	; 0x01
	EIMSK |= (1 << pin);
     832:	8d e3       	ldi	r24, 0x3D	; 61
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	2d e3       	ldi	r18, 0x3D	; 61
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	f9 01       	movw	r30, r18
     83c:	20 81       	ld	r18, Z
     83e:	62 2f       	mov	r22, r18
     840:	29 81       	ldd	r18, Y+1	; 0x01
     842:	42 2f       	mov	r20, r18
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	02 c0       	rjmp	.+4      	; 0x850 <extint_init+0x2a>
     84c:	22 0f       	add	r18, r18
     84e:	33 1f       	adc	r19, r19
     850:	4a 95       	dec	r20
     852:	e2 f7       	brpl	.-8      	; 0x84c <extint_init+0x26>
     854:	26 2b       	or	r18, r22
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18
	
	EICRA &= 0xF0;
     85a:	89 e6       	ldi	r24, 0x69	; 105
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	29 e6       	ldi	r18, 0x69	; 105
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	20 7f       	andi	r18, 0xF0	; 240
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
	/*intialise both INT0 and INT1 for rising edge*/
	EICRA |= (1 << ISC00);
     86c:	89 e6       	ldi	r24, 0x69	; 105
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	29 e6       	ldi	r18, 0x69	; 105
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	21 60       	ori	r18, 0x01	; 1
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
	EICRA |= (1 << ISC01);
     87e:	89 e6       	ldi	r24, 0x69	; 105
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	29 e6       	ldi	r18, 0x69	; 105
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	22 60       	ori	r18, 0x02	; 2
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
	EICRA |= (1 << ISC10);
     890:	89 e6       	ldi	r24, 0x69	; 105
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	29 e6       	ldi	r18, 0x69	; 105
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	f9 01       	movw	r30, r18
     89a:	20 81       	ld	r18, Z
     89c:	24 60       	ori	r18, 0x04	; 4
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
	EICRA |= (1 << ISC11);
     8a2:	89 e6       	ldi	r24, 0x69	; 105
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	29 e6       	ldi	r18, 0x69	; 105
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	28 60       	ori	r18, 0x08	; 8
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
}
     8b4:	00 00       	nop
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <timer_initialise_TC1>:


/*Timer 1 (16 bit) initialised with no prescaler*/
void timer_initialise_TC1()
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     8c6:	80 e8       	ldi	r24, 0x80	; 128
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	fc 01       	movw	r30, r24
     8cc:	10 82       	st	Z, r1
	TCCR1B = 1;
     8ce:	81 e8       	ldi	r24, 0x81	; 129
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	21 e0       	ldi	r18, 0x01	; 1
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18

}
     8d8:	00 00       	nop
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <timer_wait>:
// This function waits for the timer to overflow. An overflow occurs
// every milliseconds. Each overflow it increments a count variable.
// This is continued until the number of milliseconds requested have
// been passed
void timer_wait(uint32_t milliseconds)
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	28 97       	sbiw	r28, 0x08	; 8
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	6d 83       	std	Y+5, r22	; 0x05
     8f6:	7e 83       	std	Y+6, r23	; 0x06
     8f8:	8f 83       	std	Y+7, r24	; 0x07
     8fa:	98 87       	std	Y+8, r25	; 0x08
	uint32_t timer_overflows = 0;
     8fc:	19 82       	std	Y+1, r1	; 0x01
     8fe:	1a 82       	std	Y+2, r1	; 0x02
     900:	1b 82       	std	Y+3, r1	; 0x03
     902:	1c 82       	std	Y+4, r1	; 0x04

	TCNT0 = 0;	// Reset the count
     904:	86 e4       	ldi	r24, 0x46	; 70
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	fc 01       	movw	r30, r24
     90a:	10 82       	st	Z, r1

	// Loop until the requested milliseconds have elapsed
	while (timer_overflows < milliseconds) {
     90c:	1e c0       	rjmp	.+60     	; 0x94a <__stack+0x4b>
		// Check if the timer has overflowed
		if ((TIFR0 & (1 << OCF0A)) != 0) {
     90e:	85 e3       	ldi	r24, 0x35	; 53
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fc 01       	movw	r30, r24
     914:	80 81       	ld	r24, Z
     916:	88 2f       	mov	r24, r24
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	82 70       	andi	r24, 0x02	; 2
     91c:	99 27       	eor	r25, r25
     91e:	89 2b       	or	r24, r25
     920:	a1 f0       	breq	.+40     	; 0x94a <__stack+0x4b>
			timer_overflows++;		// Increase the count
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	ab 81       	ldd	r26, Y+3	; 0x03
     928:	bc 81       	ldd	r27, Y+4	; 0x04
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	a1 1d       	adc	r26, r1
     92e:	b1 1d       	adc	r27, r1
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	9a 83       	std	Y+2, r25	; 0x02
     934:	ab 83       	std	Y+3, r26	; 0x03
     936:	bc 83       	std	Y+4, r27	; 0x04
			TIFR0 |= (1 << OCF0A);	// Reset the overflow flag
     938:	85 e3       	ldi	r24, 0x35	; 53
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	25 e3       	ldi	r18, 0x35	; 53
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	20 81       	ld	r18, Z
     944:	22 60       	ori	r18, 0x02	; 2
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
	uint32_t timer_overflows = 0;

	TCNT0 = 0;	// Reset the count

	// Loop until the requested milliseconds have elapsed
	while (timer_overflows < milliseconds) {
     94a:	29 81       	ldd	r18, Y+1	; 0x01
     94c:	3a 81       	ldd	r19, Y+2	; 0x02
     94e:	4b 81       	ldd	r20, Y+3	; 0x03
     950:	5c 81       	ldd	r21, Y+4	; 0x04
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	af 81       	ldd	r26, Y+7	; 0x07
     958:	b8 85       	ldd	r27, Y+8	; 0x08
     95a:	28 17       	cp	r18, r24
     95c:	39 07       	cpc	r19, r25
     95e:	4a 07       	cpc	r20, r26
     960:	5b 07       	cpc	r21, r27
     962:	a8 f2       	brcs	.-86     	; 0x90e <__stack+0xf>
		if ((TIFR0 & (1 << OCF0A)) != 0) {
			timer_overflows++;		// Increase the count
			TIFR0 |= (1 << OCF0A);	// Reset the overflow flag
		}
	}
}
     964:	00 00       	nop
     966:	28 96       	adiw	r28, 0x08	; 8
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <uart_initialise>:
#include "uart.h"

static FILE usart_stdout = FDEV_SETUP_STREAM(uart_transmit_byte, NULL, _FDEV_SETUP_WRITE);

void uart_initialise(uint32_t baud_rate)
{
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	00 d0       	rcall	.+0      	; 0x982 <uart_initialise+0xa>
     982:	00 d0       	rcall	.+0      	; 0x984 <uart_initialise+0xc>
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	69 83       	std	Y+1, r22	; 0x01
     98a:	7a 83       	std	Y+2, r23	; 0x02
     98c:	8b 83       	std	Y+3, r24	; 0x03
     98e:	9c 83       	std	Y+4, r25	; 0x04
	UCSR0A = 0x00;
     990:	80 ec       	ldi	r24, 0xC0	; 192
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	10 82       	st	Z, r1
	/* enable transmitter*/
	UCSR0B = 0x08;
     998:	81 ec       	ldi	r24, 0xC1	; 193
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	28 e0       	ldi	r18, 0x08	; 8
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
	/* set 8 bit character size*/
	UCSR0C = 0x06;
     9a2:	82 ec       	ldi	r24, 0xC2	; 194
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	26 e0       	ldi	r18, 0x06	; 6
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
	/* set baud rate prescaler*/
	UBRR0 = 16000000 / (16 * baud_rate) - 1;
     9ac:	04 ec       	ldi	r16, 0xC4	; 196
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	ab 81       	ldd	r26, Y+3	; 0x03
     9b6:	bc 81       	ldd	r27, Y+4	; 0x04
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	aa 1f       	adc	r26, r26
     9be:	bb 1f       	adc	r27, r27
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	aa 1f       	adc	r26, r26
     9c6:	bb 1f       	adc	r27, r27
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	aa 1f       	adc	r26, r26
     9ce:	bb 1f       	adc	r27, r27
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	aa 1f       	adc	r26, r26
     9d6:	bb 1f       	adc	r27, r27
     9d8:	9c 01       	movw	r18, r24
     9da:	ad 01       	movw	r20, r26
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	94 e2       	ldi	r25, 0x24	; 36
     9e0:	a4 ef       	ldi	r26, 0xF4	; 244
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	bc 01       	movw	r22, r24
     9e6:	cd 01       	movw	r24, r26
     9e8:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
     9ec:	da 01       	movw	r26, r20
     9ee:	c9 01       	movw	r24, r18
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f8 01       	movw	r30, r16
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	80 83       	st	Z, r24
	
	stdout = &usart_stdout;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__iob+0x3>
     a00:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__iob+0x2>
}
     a04:	00 00       	nop
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <uart_transmit_byte>:

void uart_transmit_byte(uint8_t byte)
{
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	1f 92       	push	r1
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	89 83       	std	Y+1, r24	; 0x01
	// Wait for the UART data register empty flag
	while ((UCSR0A & 0x20) == 0) {
     a24:	00 00       	nop
     a26:	80 ec       	ldi	r24, 0xC0	; 192
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	fc 01       	movw	r30, r24
     a2c:	80 81       	ld	r24, Z
     a2e:	88 2f       	mov	r24, r24
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	80 72       	andi	r24, 0x20	; 32
     a34:	99 27       	eor	r25, r25
     a36:	89 2b       	or	r24, r25
     a38:	b1 f3       	breq	.-20     	; 0xa26 <uart_transmit_byte+0xe>
		;
	}
	
	// Put the byte to be sent into the data register
	UDR0 = byte;
     a3a:	86 ec       	ldi	r24, 0xC6	; 198
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	29 81       	ldd	r18, Y+1	; 0x01
     a40:	fc 01       	movw	r30, r24
     a42:	20 83       	st	Z, r18
}
     a44:	00 00       	nop
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <FSM_tick>:
	STATE_BEGIN_TRANSMISSION,
};


void FSM_tick(void)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	2a 97       	sbiw	r28, 0x0a	; 10
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
	static enum state current_state = STATE_V_PEAK;

	uint16_t v_peak = 0;
     a62:	1a 82       	std	Y+2, r1	; 0x02
     a64:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i_rms = 0;
     a66:	1c 82       	std	Y+4, r1	; 0x04
     a68:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t avg_power = 0;	
     a6a:	1e 82       	std	Y+6, r1	; 0x06
     a6c:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t pf = 0;
     a6e:	18 86       	std	Y+8, r1	; 0x08
     a70:	1f 82       	std	Y+7, r1	; 0x07
	
	/* obtain an offset voltage for an entire set of transmission*/
	uint16_t offset_voltage_count = get_offset_voltage();
     a72:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_offset_voltage>
     a76:	9a 87       	std	Y+10, r25	; 0x0a
     a78:	89 87       	std	Y+9, r24	; 0x09

	switch (current_state) {
     a7a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <current_state.1842>
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	83 30       	cpi	r24, 0x03	; 3
     a84:	91 05       	cpc	r25, r1
     a86:	d9 f0       	breq	.+54     	; 0xabe <FSM_tick+0x70>
     a88:	84 30       	cpi	r24, 0x04	; 4
     a8a:	91 05       	cpc	r25, r1
     a8c:	34 f4       	brge	.+12     	; 0xa9a <FSM_tick+0x4c>
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	91 05       	cpc	r25, r1
     a92:	49 f0       	breq	.+18     	; 0xaa6 <FSM_tick+0x58>
     a94:	02 97       	sbiw	r24, 0x02	; 2
     a96:	69 f0       	breq	.+26     	; 0xab2 <FSM_tick+0x64>
     a98:	2f c0       	rjmp	.+94     	; 0xaf8 <FSM_tick+0xaa>
     a9a:	84 30       	cpi	r24, 0x04	; 4
     a9c:	91 05       	cpc	r25, r1
     a9e:	a9 f0       	breq	.+42     	; 0xaca <FSM_tick+0x7c>
     aa0:	05 97       	sbiw	r24, 0x05	; 5
     aa2:	f9 f0       	breq	.+62     	; 0xae2 <FSM_tick+0x94>
     aa4:	29 c0       	rjmp	.+82     	; 0xaf8 <FSM_tick+0xaa>
		case STATE_V_PEAK:
			v_peak = get_v_peak(offset_voltage_count);
     aa6:	89 85       	ldd	r24, Y+9	; 0x09
     aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aaa:	0e 94 bf 02 	call	0x57e	; 0x57e <get_v_peak>
     aae:	9a 83       	std	Y+2, r25	; 0x02
     ab0:	89 83       	std	Y+1, r24	; 0x01

		case STATE_I_RMS:
			i_rms = get_rms_current(offset_voltage_count);
     ab2:	89 85       	ldd	r24, Y+9	; 0x09
     ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab6:	0e 94 5f 01 	call	0x2be	; 0x2be <get_rms_current>
     aba:	9c 83       	std	Y+4, r25	; 0x04
     abc:	8b 83       	std	Y+3, r24	; 0x03

		case STATE_AVG_POWER:
			avg_power = get_avg_power(offset_voltage_count);
     abe:	89 85       	ldd	r24, Y+9	; 0x09
     ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac2:	0e 94 06 01 	call	0x20c	; 0x20c <get_avg_power>
     ac6:	9e 83       	std	Y+6, r25	; 0x06
     ac8:	8d 83       	std	Y+5, r24	; 0x05
			
		case STATE_POWER_FACTOR:
			/* allow some time for interrupts to fire before reading count variable*/
			sei();
     aca:	78 94       	sei
			timer_wait(30);
     acc:	6e e1       	ldi	r22, 0x1E	; 30
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <timer_wait>
			cli();
     ad8:	f8 94       	cli
			pf = get_pf();
     ada:	0e 94 55 02 	call	0x4aa	; 0x4aa <get_pf>
     ade:	98 87       	std	Y+8, r25	; 0x08
     ae0:	8f 83       	std	Y+7, r24	; 0x07
			
		case STATE_BEGIN_TRANSMISSION:
			transmit_all(v_peak, i_rms, avg_power, pf);
     ae2:	2f 81       	ldd	r18, Y+7	; 0x07
     ae4:	38 85       	ldd	r19, Y+8	; 0x08
     ae6:	4d 81       	ldd	r20, Y+5	; 0x05
     ae8:	5e 81       	ldd	r21, Y+6	; 0x06
     aea:	6b 81       	ldd	r22, Y+3	; 0x03
     aec:	7c 81       	ldd	r23, Y+4	; 0x04
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	9a 81       	ldd	r25, Y+2	; 0x02
     af2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <transmit_all>
			break;
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <FSM_tick+0xb2>
		default:
			current_state = STATE_V_PEAK;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <current_state.1842>
			break;
     afe:	00 00       	nop
	}
}
     b00:	00 00       	nop
     b02:	2a 96       	adiw	r28, 0x0a	; 10
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <main>:

#include "fsm_msd/state_machine.h"
#include "constants.h"

int main(void)
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
	adc_initialise();
     b1c:	0e 94 4b 03 	call	0x696	; 0x696 <adc_initialise>
	timer_initialise_TC0();
     b20:	0e 94 fd 03 	call	0x7fa	; 0x7fa <timer_initialise_TC0>
	timer_initialise_TC1();
     b24:	0e 94 5f 04 	call	0x8be	; 0x8be <timer_initialise_TC1>
	extint_init(ZERO_CROSSING_V_PIN);
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0e 94 13 04 	call	0x826	; 0x826 <extint_init>
	extint_init(ZERO_CROSSING_I_PIN);
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	0e 94 13 04 	call	0x826	; 0x826 <extint_init>
	uart_initialise(BAUD_RATE);
     b34:	60 e8       	ldi	r22, 0x80	; 128
     b36:	75 e2       	ldi	r23, 0x25	; 37
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 bc 04 	call	0x978	; 0x978 <uart_initialise>
	
    while (1) 
    {
		FSM_tick();
     b40:	0e 94 27 05 	call	0xa4e	; 0xa4e <FSM_tick>
	}
     b44:	fd cf       	rjmp	.-6      	; 0xb40 <main+0x2c>

00000b46 <max_diviser>:
		digit += 48;
		uart_transmit_byte(digit);
		diviser /= 10;
		//uart_transmit_byte(63);
	}
}
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <max_diviser+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <max_diviser+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	8a e0       	ldi	r24, 0x0A	; 10
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	0d c0       	rjmp	.+26     	; 0xb7a <max_diviser+0x34>
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	9c 01       	movw	r18, r24
     b6a:	22 0f       	add	r18, r18
     b6c:	33 1f       	adc	r19, r19
     b6e:	22 0f       	add	r18, r18
     b70:	33 1f       	adc	r19, r19
     b72:	82 0f       	add	r24, r18
     b74:	93 1f       	adc	r25, r19
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	29 81       	ldd	r18, Y+1	; 0x01
     b7c:	3a 81       	ldd	r19, Y+2	; 0x02
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	b9 01       	movw	r22, r18
     b84:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     b88:	cb 01       	movw	r24, r22
     b8a:	89 2b       	or	r24, r25
     b8c:	49 f7       	brne	.-46     	; 0xb60 <max_diviser+0x1a>
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	2a e0       	ldi	r18, 0x0A	; 10
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	b9 01       	movw	r22, r18
     b98:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divmodhi4>
     b9c:	cb 01       	movw	r24, r22
     b9e:	9a 83       	std	Y+2, r25	; 0x02
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	09 2e       	mov	r0, r25
     ba8:	00 0c       	add	r0, r0
     baa:	aa 0b       	sbc	r26, r26
     bac:	bb 0b       	sbc	r27, r27
     bae:	bc 01       	movw	r22, r24
     bb0:	cd 01       	movw	r24, r26
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <transmit_newline>:
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	8a e0       	ldi	r24, 0x0A	; 10
     bca:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_transmit_byte>
     bce:	00 00       	nop
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <transmit_number>:
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	2a 97       	sbiw	r28, 0x0a	; 10
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	8f 83       	std	Y+7, r24	; 0x07
     bec:	79 87       	std	Y+9, r23	; 0x09
     bee:	68 87       	std	Y+8, r22	; 0x08
     bf0:	4a 87       	std	Y+10, r20	; 0x0a
     bf2:	88 85       	ldd	r24, Y+8	; 0x08
     bf4:	99 85       	ldd	r25, Y+9	; 0x09
     bf6:	0e 94 a3 05 	call	0xb46	; 0xb46 <max_diviser>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	9a 83       	std	Y+2, r25	; 0x02
     c02:	ab 83       	std	Y+3, r26	; 0x03
     c04:	bc 83       	std	Y+4, r27	; 0x04
     c06:	1d 82       	std	Y+5, r1	; 0x05
     c08:	3c c0       	rjmp	.+120    	; 0xc82 <transmit_number+0xac>
     c0a:	9d 81       	ldd	r25, Y+5	; 0x05
     c0c:	8f 81       	ldd	r24, Y+7	; 0x07
     c0e:	98 17       	cp	r25, r24
     c10:	19 f4       	brne	.+6      	; 0xc18 <transmit_number+0x42>
     c12:	8e e2       	ldi	r24, 0x2E	; 46
     c14:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_transmit_byte>
     c18:	88 85       	ldd	r24, Y+8	; 0x08
     c1a:	99 85       	ldd	r25, Y+9	; 0x09
     c1c:	cc 01       	movw	r24, r24
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	29 81       	ldd	r18, Y+1	; 0x01
     c24:	3a 81       	ldd	r19, Y+2	; 0x02
     c26:	4b 81       	ldd	r20, Y+3	; 0x03
     c28:	5c 81       	ldd	r21, Y+4	; 0x04
     c2a:	bc 01       	movw	r22, r24
     c2c:	cd 01       	movw	r24, r26
     c2e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
     c32:	da 01       	movw	r26, r20
     c34:	c9 01       	movw	r24, r18
     c36:	2a e0       	ldi	r18, 0x0A	; 10
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	8e 83       	std	Y+6, r24	; 0x06
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	80 5d       	subi	r24, 0xD0	; 208
     c50:	8e 83       	std	Y+6, r24	; 0x06
     c52:	8e 81       	ldd	r24, Y+6	; 0x06
     c54:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_transmit_byte>
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	ab 81       	ldd	r26, Y+3	; 0x03
     c5e:	bc 81       	ldd	r27, Y+4	; 0x04
     c60:	2a e0       	ldi	r18, 0x0A	; 10
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	bc 01       	movw	r22, r24
     c6a:	cd 01       	movw	r24, r26
     c6c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
     c70:	da 01       	movw	r26, r20
     c72:	c9 01       	movw	r24, r18
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	ab 83       	std	Y+3, r26	; 0x03
     c7a:	bc 83       	std	Y+4, r27	; 0x04
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	8d 83       	std	Y+5, r24	; 0x05
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	8a 85       	ldd	r24, Y+10	; 0x0a
     c86:	98 17       	cp	r25, r24
     c88:	08 f4       	brcc	.+2      	; 0xc8c <transmit_number+0xb6>
     c8a:	bf cf       	rjmp	.-130    	; 0xc0a <transmit_number+0x34>
     c8c:	00 00       	nop
     c8e:	2a 96       	adiw	r28, 0x0a	; 10
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <transmit_v_peak>:


/*---------------------------------------------------------*/

static void transmit_v_peak(uint16_t v_peak)
{
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <transmit_v_peak+0x6>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
	printf("%s", "V="); 
     cae:	8f e0       	ldi	r24, 0x0F	; 15
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	89 2f       	mov	r24, r25
     cb4:	8f 93       	push	r24
     cb6:	8f e0       	ldi	r24, 0x0F	; 15
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	8f 93       	push	r24
     cbc:	82 e1       	ldi	r24, 0x12	; 18
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	89 2f       	mov	r24, r25
     cc2:	8f 93       	push	r24
     cc4:	82 e1       	ldi	r24, 0x12	; 18
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	8f 93       	push	r24
     cca:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
	transmit_number(2, v_peak, 4);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	44 e0       	ldi	r20, 0x04	; 4
     cdc:	bc 01       	movw	r22, r24
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <transmit_number>
	transmit_newline();
     ce4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <transmit_newline>
}
     ce8:	00 00       	nop
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <transmit_i_rms>:

static void transmit_i_rms(uint16_t i_rms)
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <transmit_i_rms+0x6>
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	9a 83       	std	Y+2, r25	; 0x02
     d00:	89 83       	std	Y+1, r24	; 0x01
    printf("%s", "I="); 
     d02:	85 e1       	ldi	r24, 0x15	; 21
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	89 2f       	mov	r24, r25
     d08:	8f 93       	push	r24
     d0a:	85 e1       	ldi	r24, 0x15	; 21
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	8f 93       	push	r24
     d10:	82 e1       	ldi	r24, 0x12	; 18
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	89 2f       	mov	r24, r25
     d16:	8f 93       	push	r24
     d18:	82 e1       	ldi	r24, 0x12	; 18
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	8f 93       	push	r24
     d1e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
	transmit_number(3, i_rms, 4);
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	44 e0       	ldi	r20, 0x04	; 4
     d30:	bc 01       	movw	r22, r24
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <transmit_number>
	transmit_newline();
     d38:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <transmit_newline>
}
     d3c:	00 00       	nop
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <transmit_power>:

static void transmit_power(uint16_t p_avg)
{
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <transmit_power+0x6>
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
	printf("%s","P="); 
     d56:	88 e1       	ldi	r24, 0x18	; 24
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	89 2f       	mov	r24, r25
     d5c:	8f 93       	push	r24
     d5e:	88 e1       	ldi	r24, 0x18	; 24
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	8f 93       	push	r24
     d64:	82 e1       	ldi	r24, 0x12	; 18
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	89 2f       	mov	r24, r25
     d6a:	8f 93       	push	r24
     d6c:	82 e1       	ldi	r24, 0x12	; 18
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	8f 93       	push	r24
     d72:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
	transmit_number(1, p_avg, 4);
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	44 e0       	ldi	r20, 0x04	; 4
     d84:	bc 01       	movw	r22, r24
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <transmit_number>
	transmit_newline();
     d8c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <transmit_newline>
}
     d90:	00 00       	nop
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <transmit_pf>:

static void transmit_pf(uint16_t pf)
{
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	00 d0       	rcall	.+0      	; 0xda2 <transmit_pf+0x6>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
	printf("%s", "F=");
     daa:	8b e1       	ldi	r24, 0x1B	; 27
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	89 2f       	mov	r24, r25
     db0:	8f 93       	push	r24
     db2:	8b e1       	ldi	r24, 0x1B	; 27
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	8f 93       	push	r24
     db8:	82 e1       	ldi	r24, 0x12	; 18
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	89 2f       	mov	r24, r25
     dbe:	8f 93       	push	r24
     dc0:	82 e1       	ldi	r24, 0x12	; 18
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	8f 93       	push	r24
     dc6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
	uart_transmit_byte(48);
     dd2:	80 e3       	ldi	r24, 0x30	; 48
     dd4:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_transmit_byte>
	transmit_number(0, pf, 3);
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	43 e0       	ldi	r20, 0x03	; 3
     dde:	bc 01       	movw	r22, r24
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <transmit_number>
	transmit_newline();
     de6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <transmit_newline>
}
     dea:	00 00       	nop
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <transmit_all>:

void transmit_all(uint16_t v_peak, uint16_t i_rms, uint16_t p_avg, uint16_t pf)
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	28 97       	sbiw	r28, 0x08	; 8
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	7c 83       	std	Y+4, r23	; 0x04
     e10:	6b 83       	std	Y+3, r22	; 0x03
     e12:	5e 83       	std	Y+6, r21	; 0x06
     e14:	4d 83       	std	Y+5, r20	; 0x05
     e16:	38 87       	std	Y+8, r19	; 0x08
     e18:	2f 83       	std	Y+7, r18	; 0x07
	transmit_v_peak(v_peak);
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	0e 94 50 06 	call	0xca0	; 0xca0 <transmit_v_peak>
	transmit_i_rms(i_rms);
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <transmit_i_rms>
	transmit_power(p_avg);
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	9e 81       	ldd	r25, Y+6	; 0x06
     e2e:	0e 94 a4 06 	call	0xd48	; 0xd48 <transmit_power>
	transmit_pf(pf);
     e32:	8f 81       	ldd	r24, Y+7	; 0x07
     e34:	98 85       	ldd	r25, Y+8	; 0x08
     e36:	0e 94 ce 06 	call	0xd9c	; 0xd9c <transmit_pf>

}
     e3a:	00 00       	nop
     e3c:	28 96       	adiw	r28, 0x08	; 8
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <__subsf3>:
     e4e:	50 58       	subi	r21, 0x80	; 128

00000e50 <__addsf3>:
     e50:	bb 27       	eor	r27, r27
     e52:	aa 27       	eor	r26, r26
     e54:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__addsf3x>
     e58:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_round>
     e5c:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_pscA>
     e60:	38 f0       	brcs	.+14     	; 0xe70 <__addsf3+0x20>
     e62:	0e 94 15 08 	call	0x102a	; 0x102a <__fp_pscB>
     e66:	20 f0       	brcs	.+8      	; 0xe70 <__addsf3+0x20>
     e68:	39 f4       	brne	.+14     	; 0xe78 <__addsf3+0x28>
     e6a:	9f 3f       	cpi	r25, 0xFF	; 255
     e6c:	19 f4       	brne	.+6      	; 0xe74 <__addsf3+0x24>
     e6e:	26 f4       	brtc	.+8      	; 0xe78 <__addsf3+0x28>
     e70:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_nan>
     e74:	0e f4       	brtc	.+2      	; 0xe78 <__addsf3+0x28>
     e76:	e0 95       	com	r30
     e78:	e7 fb       	bst	r30, 7
     e7a:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_inf>

00000e7e <__addsf3x>:
     e7e:	e9 2f       	mov	r30, r25
     e80:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_split3>
     e84:	58 f3       	brcs	.-42     	; 0xe5c <__addsf3+0xc>
     e86:	ba 17       	cp	r27, r26
     e88:	62 07       	cpc	r22, r18
     e8a:	73 07       	cpc	r23, r19
     e8c:	84 07       	cpc	r24, r20
     e8e:	95 07       	cpc	r25, r21
     e90:	20 f0       	brcs	.+8      	; 0xe9a <__addsf3x+0x1c>
     e92:	79 f4       	brne	.+30     	; 0xeb2 <__addsf3x+0x34>
     e94:	a6 f5       	brtc	.+104    	; 0xefe <__addsf3x+0x80>
     e96:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_zero>
     e9a:	0e f4       	brtc	.+2      	; 0xe9e <__addsf3x+0x20>
     e9c:	e0 95       	com	r30
     e9e:	0b 2e       	mov	r0, r27
     ea0:	ba 2f       	mov	r27, r26
     ea2:	a0 2d       	mov	r26, r0
     ea4:	0b 01       	movw	r0, r22
     ea6:	b9 01       	movw	r22, r18
     ea8:	90 01       	movw	r18, r0
     eaa:	0c 01       	movw	r0, r24
     eac:	ca 01       	movw	r24, r20
     eae:	a0 01       	movw	r20, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	ff 27       	eor	r31, r31
     eb4:	59 1b       	sub	r21, r25
     eb6:	99 f0       	breq	.+38     	; 0xede <__addsf3x+0x60>
     eb8:	59 3f       	cpi	r21, 0xF9	; 249
     eba:	50 f4       	brcc	.+20     	; 0xed0 <__addsf3x+0x52>
     ebc:	50 3e       	cpi	r21, 0xE0	; 224
     ebe:	68 f1       	brcs	.+90     	; 0xf1a <__addsf3x+0x9c>
     ec0:	1a 16       	cp	r1, r26
     ec2:	f0 40       	sbci	r31, 0x00	; 0
     ec4:	a2 2f       	mov	r26, r18
     ec6:	23 2f       	mov	r18, r19
     ec8:	34 2f       	mov	r19, r20
     eca:	44 27       	eor	r20, r20
     ecc:	58 5f       	subi	r21, 0xF8	; 248
     ece:	f3 cf       	rjmp	.-26     	; 0xeb6 <__addsf3x+0x38>
     ed0:	46 95       	lsr	r20
     ed2:	37 95       	ror	r19
     ed4:	27 95       	ror	r18
     ed6:	a7 95       	ror	r26
     ed8:	f0 40       	sbci	r31, 0x00	; 0
     eda:	53 95       	inc	r21
     edc:	c9 f7       	brne	.-14     	; 0xed0 <__addsf3x+0x52>
     ede:	7e f4       	brtc	.+30     	; 0xefe <__addsf3x+0x80>
     ee0:	1f 16       	cp	r1, r31
     ee2:	ba 0b       	sbc	r27, r26
     ee4:	62 0b       	sbc	r22, r18
     ee6:	73 0b       	sbc	r23, r19
     ee8:	84 0b       	sbc	r24, r20
     eea:	ba f0       	brmi	.+46     	; 0xf1a <__addsf3x+0x9c>
     eec:	91 50       	subi	r25, 0x01	; 1
     eee:	a1 f0       	breq	.+40     	; 0xf18 <__addsf3x+0x9a>
     ef0:	ff 0f       	add	r31, r31
     ef2:	bb 1f       	adc	r27, r27
     ef4:	66 1f       	adc	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	c2 f7       	brpl	.-16     	; 0xeec <__addsf3x+0x6e>
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <__addsf3x+0x9c>
     efe:	ba 0f       	add	r27, r26
     f00:	62 1f       	adc	r22, r18
     f02:	73 1f       	adc	r23, r19
     f04:	84 1f       	adc	r24, r20
     f06:	48 f4       	brcc	.+18     	; 0xf1a <__addsf3x+0x9c>
     f08:	87 95       	ror	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f7 95       	ror	r31
     f12:	9e 3f       	cpi	r25, 0xFE	; 254
     f14:	08 f0       	brcs	.+2      	; 0xf18 <__addsf3x+0x9a>
     f16:	b0 cf       	rjmp	.-160    	; 0xe78 <__addsf3+0x28>
     f18:	93 95       	inc	r25
     f1a:	88 0f       	add	r24, r24
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <__addsf3x+0xa2>
     f1e:	99 27       	eor	r25, r25
     f20:	ee 0f       	add	r30, r30
     f22:	97 95       	ror	r25
     f24:	87 95       	ror	r24
     f26:	08 95       	ret

00000f28 <cos>:
     f28:	0e 94 1e 08 	call	0x103c	; 0x103c <__fp_rempio2>
     f2c:	e3 95       	inc	r30
     f2e:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_sinus>

00000f32 <__fixunssfsi>:
     f32:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_splitA>
     f36:	88 f0       	brcs	.+34     	; 0xf5a <__fixunssfsi+0x28>
     f38:	9f 57       	subi	r25, 0x7F	; 127
     f3a:	98 f0       	brcs	.+38     	; 0xf62 <__fixunssfsi+0x30>
     f3c:	b9 2f       	mov	r27, r25
     f3e:	99 27       	eor	r25, r25
     f40:	b7 51       	subi	r27, 0x17	; 23
     f42:	b0 f0       	brcs	.+44     	; 0xf70 <__fixunssfsi+0x3e>
     f44:	e1 f0       	breq	.+56     	; 0xf7e <__fixunssfsi+0x4c>
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	1a f0       	brmi	.+6      	; 0xf56 <__fixunssfsi+0x24>
     f50:	ba 95       	dec	r27
     f52:	c9 f7       	brne	.-14     	; 0xf46 <__fixunssfsi+0x14>
     f54:	14 c0       	rjmp	.+40     	; 0xf7e <__fixunssfsi+0x4c>
     f56:	b1 30       	cpi	r27, 0x01	; 1
     f58:	91 f0       	breq	.+36     	; 0xf7e <__fixunssfsi+0x4c>
     f5a:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_zero>
     f5e:	b1 e0       	ldi	r27, 0x01	; 1
     f60:	08 95       	ret
     f62:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_zero>
     f66:	67 2f       	mov	r22, r23
     f68:	78 2f       	mov	r23, r24
     f6a:	88 27       	eor	r24, r24
     f6c:	b8 5f       	subi	r27, 0xF8	; 248
     f6e:	39 f0       	breq	.+14     	; 0xf7e <__fixunssfsi+0x4c>
     f70:	b9 3f       	cpi	r27, 0xF9	; 249
     f72:	cc f3       	brlt	.-14     	; 0xf66 <__fixunssfsi+0x34>
     f74:	86 95       	lsr	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b3 95       	inc	r27
     f7c:	d9 f7       	brne	.-10     	; 0xf74 <__fixunssfsi+0x42>
     f7e:	3e f4       	brtc	.+14     	; 0xf8e <__fixunssfsi+0x5c>
     f80:	90 95       	com	r25
     f82:	80 95       	com	r24
     f84:	70 95       	com	r23
     f86:	61 95       	neg	r22
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	08 95       	ret

00000f90 <__floatunsisf>:
     f90:	e8 94       	clt
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <__floatsisf+0x12>

00000f94 <__floatsisf>:
     f94:	97 fb       	bst	r25, 7
     f96:	3e f4       	brtc	.+14     	; 0xfa6 <__floatsisf+0x12>
     f98:	90 95       	com	r25
     f9a:	80 95       	com	r24
     f9c:	70 95       	com	r23
     f9e:	61 95       	neg	r22
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 4f       	sbci	r24, 0xFF	; 255
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	99 23       	and	r25, r25
     fa8:	a9 f0       	breq	.+42     	; 0xfd4 <__floatsisf+0x40>
     faa:	f9 2f       	mov	r31, r25
     fac:	96 e9       	ldi	r25, 0x96	; 150
     fae:	bb 27       	eor	r27, r27
     fb0:	93 95       	inc	r25
     fb2:	f6 95       	lsr	r31
     fb4:	87 95       	ror	r24
     fb6:	77 95       	ror	r23
     fb8:	67 95       	ror	r22
     fba:	b7 95       	ror	r27
     fbc:	f1 11       	cpse	r31, r1
     fbe:	f8 cf       	rjmp	.-16     	; 0xfb0 <__floatsisf+0x1c>
     fc0:	fa f4       	brpl	.+62     	; 0x1000 <__floatsisf+0x6c>
     fc2:	bb 0f       	add	r27, r27
     fc4:	11 f4       	brne	.+4      	; 0xfca <__floatsisf+0x36>
     fc6:	60 ff       	sbrs	r22, 0
     fc8:	1b c0       	rjmp	.+54     	; 0x1000 <__floatsisf+0x6c>
     fca:	6f 5f       	subi	r22, 0xFF	; 255
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	8f 4f       	sbci	r24, 0xFF	; 255
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	16 c0       	rjmp	.+44     	; 0x1000 <__floatsisf+0x6c>
     fd4:	88 23       	and	r24, r24
     fd6:	11 f0       	breq	.+4      	; 0xfdc <__floatsisf+0x48>
     fd8:	96 e9       	ldi	r25, 0x96	; 150
     fda:	11 c0       	rjmp	.+34     	; 0xffe <__floatsisf+0x6a>
     fdc:	77 23       	and	r23, r23
     fde:	21 f0       	breq	.+8      	; 0xfe8 <__floatsisf+0x54>
     fe0:	9e e8       	ldi	r25, 0x8E	; 142
     fe2:	87 2f       	mov	r24, r23
     fe4:	76 2f       	mov	r23, r22
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <__floatsisf+0x5e>
     fe8:	66 23       	and	r22, r22
     fea:	71 f0       	breq	.+28     	; 0x1008 <__floatsisf+0x74>
     fec:	96 e8       	ldi	r25, 0x86	; 134
     fee:	86 2f       	mov	r24, r22
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	2a f0       	brmi	.+10     	; 0x1000 <__floatsisf+0x6c>
     ff6:	9a 95       	dec	r25
     ff8:	66 0f       	add	r22, r22
     ffa:	77 1f       	adc	r23, r23
     ffc:	88 1f       	adc	r24, r24
     ffe:	da f7       	brpl	.-10     	; 0xff6 <__floatsisf+0x62>
    1000:	88 0f       	add	r24, r24
    1002:	96 95       	lsr	r25
    1004:	87 95       	ror	r24
    1006:	97 f9       	bld	r25, 7
    1008:	08 95       	ret

0000100a <__fp_inf>:
    100a:	97 f9       	bld	r25, 7
    100c:	9f 67       	ori	r25, 0x7F	; 127
    100e:	80 e8       	ldi	r24, 0x80	; 128
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	08 95       	ret

00001016 <__fp_nan>:
    1016:	9f ef       	ldi	r25, 0xFF	; 255
    1018:	80 ec       	ldi	r24, 0xC0	; 192
    101a:	08 95       	ret

0000101c <__fp_pscA>:
    101c:	00 24       	eor	r0, r0
    101e:	0a 94       	dec	r0
    1020:	16 16       	cp	r1, r22
    1022:	17 06       	cpc	r1, r23
    1024:	18 06       	cpc	r1, r24
    1026:	09 06       	cpc	r0, r25
    1028:	08 95       	ret

0000102a <__fp_pscB>:
    102a:	00 24       	eor	r0, r0
    102c:	0a 94       	dec	r0
    102e:	12 16       	cp	r1, r18
    1030:	13 06       	cpc	r1, r19
    1032:	14 06       	cpc	r1, r20
    1034:	05 06       	cpc	r0, r21
    1036:	08 95       	ret
    1038:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_nan>

0000103c <__fp_rempio2>:
    103c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_splitA>
    1040:	d8 f3       	brcs	.-10     	; 0x1038 <__fp_pscB+0xe>
    1042:	e8 94       	clt
    1044:	e0 e0       	ldi	r30, 0x00	; 0
    1046:	bb 27       	eor	r27, r27
    1048:	9f 57       	subi	r25, 0x7F	; 127
    104a:	f0 f0       	brcs	.+60     	; 0x1088 <__fp_rempio2+0x4c>
    104c:	2a ed       	ldi	r18, 0xDA	; 218
    104e:	3f e0       	ldi	r19, 0x0F	; 15
    1050:	49 ec       	ldi	r20, 0xC9	; 201
    1052:	06 c0       	rjmp	.+12     	; 0x1060 <__fp_rempio2+0x24>
    1054:	ee 0f       	add	r30, r30
    1056:	bb 0f       	add	r27, r27
    1058:	66 1f       	adc	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	88 1f       	adc	r24, r24
    105e:	28 f0       	brcs	.+10     	; 0x106a <__fp_rempio2+0x2e>
    1060:	b2 3a       	cpi	r27, 0xA2	; 162
    1062:	62 07       	cpc	r22, r18
    1064:	73 07       	cpc	r23, r19
    1066:	84 07       	cpc	r24, r20
    1068:	28 f0       	brcs	.+10     	; 0x1074 <__fp_rempio2+0x38>
    106a:	b2 5a       	subi	r27, 0xA2	; 162
    106c:	62 0b       	sbc	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	84 0b       	sbc	r24, r20
    1072:	e3 95       	inc	r30
    1074:	9a 95       	dec	r25
    1076:	72 f7       	brpl	.-36     	; 0x1054 <__fp_rempio2+0x18>
    1078:	80 38       	cpi	r24, 0x80	; 128
    107a:	30 f4       	brcc	.+12     	; 0x1088 <__fp_rempio2+0x4c>
    107c:	9a 95       	dec	r25
    107e:	bb 0f       	add	r27, r27
    1080:	66 1f       	adc	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	d2 f7       	brpl	.-12     	; 0x107c <__fp_rempio2+0x40>
    1088:	90 48       	sbci	r25, 0x80	; 128
    108a:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_mpack_finite>

0000108e <__fp_round>:
    108e:	09 2e       	mov	r0, r25
    1090:	03 94       	inc	r0
    1092:	00 0c       	add	r0, r0
    1094:	11 f4       	brne	.+4      	; 0x109a <__fp_round+0xc>
    1096:	88 23       	and	r24, r24
    1098:	52 f0       	brmi	.+20     	; 0x10ae <__fp_round+0x20>
    109a:	bb 0f       	add	r27, r27
    109c:	40 f4       	brcc	.+16     	; 0x10ae <__fp_round+0x20>
    109e:	bf 2b       	or	r27, r31
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <__fp_round+0x18>
    10a2:	60 ff       	sbrs	r22, 0
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <__fp_round+0x20>
    10a6:	6f 5f       	subi	r22, 0xFF	; 255
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	8f 4f       	sbci	r24, 0xFF	; 255
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	08 95       	ret

000010b0 <__fp_sinus>:
    10b0:	ef 93       	push	r30
    10b2:	e0 ff       	sbrs	r30, 0
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <__fp_sinus+0x14>
    10b6:	a2 ea       	ldi	r26, 0xA2	; 162
    10b8:	2a ed       	ldi	r18, 0xDA	; 218
    10ba:	3f e0       	ldi	r19, 0x0F	; 15
    10bc:	49 ec       	ldi	r20, 0xC9	; 201
    10be:	5f eb       	ldi	r21, 0xBF	; 191
    10c0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__addsf3x>
    10c4:	0e 94 47 08 	call	0x108e	; 0x108e <__fp_round>
    10c8:	0f 90       	pop	r0
    10ca:	03 94       	inc	r0
    10cc:	01 fc       	sbrc	r0, 1
    10ce:	90 58       	subi	r25, 0x80	; 128
    10d0:	e4 eb       	ldi	r30, 0xB4	; 180
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__fp_powsodd>

000010d8 <__fp_split3>:
    10d8:	57 fd       	sbrc	r21, 7
    10da:	90 58       	subi	r25, 0x80	; 128
    10dc:	44 0f       	add	r20, r20
    10de:	55 1f       	adc	r21, r21
    10e0:	59 f0       	breq	.+22     	; 0x10f8 <__fp_splitA+0x10>
    10e2:	5f 3f       	cpi	r21, 0xFF	; 255
    10e4:	71 f0       	breq	.+28     	; 0x1102 <__fp_splitA+0x1a>
    10e6:	47 95       	ror	r20

000010e8 <__fp_splitA>:
    10e8:	88 0f       	add	r24, r24
    10ea:	97 fb       	bst	r25, 7
    10ec:	99 1f       	adc	r25, r25
    10ee:	61 f0       	breq	.+24     	; 0x1108 <__fp_splitA+0x20>
    10f0:	9f 3f       	cpi	r25, 0xFF	; 255
    10f2:	79 f0       	breq	.+30     	; 0x1112 <__fp_splitA+0x2a>
    10f4:	87 95       	ror	r24
    10f6:	08 95       	ret
    10f8:	12 16       	cp	r1, r18
    10fa:	13 06       	cpc	r1, r19
    10fc:	14 06       	cpc	r1, r20
    10fe:	55 1f       	adc	r21, r21
    1100:	f2 cf       	rjmp	.-28     	; 0x10e6 <__fp_split3+0xe>
    1102:	46 95       	lsr	r20
    1104:	f1 df       	rcall	.-30     	; 0x10e8 <__fp_splitA>
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <__fp_splitA+0x30>
    1108:	16 16       	cp	r1, r22
    110a:	17 06       	cpc	r1, r23
    110c:	18 06       	cpc	r1, r24
    110e:	99 1f       	adc	r25, r25
    1110:	f1 cf       	rjmp	.-30     	; 0x10f4 <__fp_splitA+0xc>
    1112:	86 95       	lsr	r24
    1114:	71 05       	cpc	r23, r1
    1116:	61 05       	cpc	r22, r1
    1118:	08 94       	sec
    111a:	08 95       	ret

0000111c <__fp_zero>:
    111c:	e8 94       	clt

0000111e <__fp_szero>:
    111e:	bb 27       	eor	r27, r27
    1120:	66 27       	eor	r22, r22
    1122:	77 27       	eor	r23, r23
    1124:	cb 01       	movw	r24, r22
    1126:	97 f9       	bld	r25, 7
    1128:	08 95       	ret

0000112a <__mulsf3>:
    112a:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3x>
    112e:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_round>
    1132:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_pscA>
    1136:	38 f0       	brcs	.+14     	; 0x1146 <__mulsf3+0x1c>
    1138:	0e 94 15 08 	call	0x102a	; 0x102a <__fp_pscB>
    113c:	20 f0       	brcs	.+8      	; 0x1146 <__mulsf3+0x1c>
    113e:	95 23       	and	r25, r21
    1140:	11 f0       	breq	.+4      	; 0x1146 <__mulsf3+0x1c>
    1142:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_inf>
    1146:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_nan>
    114a:	11 24       	eor	r1, r1
    114c:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>

00001150 <__mulsf3x>:
    1150:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_split3>
    1154:	70 f3       	brcs	.-36     	; 0x1132 <__mulsf3+0x8>

00001156 <__mulsf3_pse>:
    1156:	95 9f       	mul	r25, r21
    1158:	c1 f3       	breq	.-16     	; 0x114a <__mulsf3+0x20>
    115a:	95 0f       	add	r25, r21
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	55 1f       	adc	r21, r21
    1160:	62 9f       	mul	r22, r18
    1162:	f0 01       	movw	r30, r0
    1164:	72 9f       	mul	r23, r18
    1166:	bb 27       	eor	r27, r27
    1168:	f0 0d       	add	r31, r0
    116a:	b1 1d       	adc	r27, r1
    116c:	63 9f       	mul	r22, r19
    116e:	aa 27       	eor	r26, r26
    1170:	f0 0d       	add	r31, r0
    1172:	b1 1d       	adc	r27, r1
    1174:	aa 1f       	adc	r26, r26
    1176:	64 9f       	mul	r22, r20
    1178:	66 27       	eor	r22, r22
    117a:	b0 0d       	add	r27, r0
    117c:	a1 1d       	adc	r26, r1
    117e:	66 1f       	adc	r22, r22
    1180:	82 9f       	mul	r24, r18
    1182:	22 27       	eor	r18, r18
    1184:	b0 0d       	add	r27, r0
    1186:	a1 1d       	adc	r26, r1
    1188:	62 1f       	adc	r22, r18
    118a:	73 9f       	mul	r23, r19
    118c:	b0 0d       	add	r27, r0
    118e:	a1 1d       	adc	r26, r1
    1190:	62 1f       	adc	r22, r18
    1192:	83 9f       	mul	r24, r19
    1194:	a0 0d       	add	r26, r0
    1196:	61 1d       	adc	r22, r1
    1198:	22 1f       	adc	r18, r18
    119a:	74 9f       	mul	r23, r20
    119c:	33 27       	eor	r19, r19
    119e:	a0 0d       	add	r26, r0
    11a0:	61 1d       	adc	r22, r1
    11a2:	23 1f       	adc	r18, r19
    11a4:	84 9f       	mul	r24, r20
    11a6:	60 0d       	add	r22, r0
    11a8:	21 1d       	adc	r18, r1
    11aa:	82 2f       	mov	r24, r18
    11ac:	76 2f       	mov	r23, r22
    11ae:	6a 2f       	mov	r22, r26
    11b0:	11 24       	eor	r1, r1
    11b2:	9f 57       	subi	r25, 0x7F	; 127
    11b4:	50 40       	sbci	r21, 0x00	; 0
    11b6:	9a f0       	brmi	.+38     	; 0x11de <__mulsf3_pse+0x88>
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__mulsf3_pse+0xa0>
    11ba:	88 23       	and	r24, r24
    11bc:	4a f0       	brmi	.+18     	; 0x11d0 <__mulsf3_pse+0x7a>
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	bb 1f       	adc	r27, r27
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	50 40       	sbci	r21, 0x00	; 0
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <__mulsf3_pse+0x64>
    11d0:	9e 3f       	cpi	r25, 0xFE	; 254
    11d2:	51 05       	cpc	r21, r1
    11d4:	80 f0       	brcs	.+32     	; 0x11f6 <__mulsf3_pse+0xa0>
    11d6:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_inf>
    11da:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>
    11de:	5f 3f       	cpi	r21, 0xFF	; 255
    11e0:	e4 f3       	brlt	.-8      	; 0x11da <__mulsf3_pse+0x84>
    11e2:	98 3e       	cpi	r25, 0xE8	; 232
    11e4:	d4 f3       	brlt	.-12     	; 0x11da <__mulsf3_pse+0x84>
    11e6:	86 95       	lsr	r24
    11e8:	77 95       	ror	r23
    11ea:	67 95       	ror	r22
    11ec:	b7 95       	ror	r27
    11ee:	f7 95       	ror	r31
    11f0:	e7 95       	ror	r30
    11f2:	9f 5f       	subi	r25, 0xFF	; 255
    11f4:	c1 f7       	brne	.-16     	; 0x11e6 <__mulsf3_pse+0x90>
    11f6:	fe 2b       	or	r31, r30
    11f8:	88 0f       	add	r24, r24
    11fa:	91 1d       	adc	r25, r1
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret
    1204:	19 f4       	brne	.+6      	; 0x120c <__mulsf3_pse+0xb6>
    1206:	16 f4       	brtc	.+4      	; 0x120c <__mulsf3_pse+0xb6>
    1208:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_nan>
    120c:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__fp_mpack>

00001210 <sqrt>:
    1210:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_splitA>
    1214:	b8 f3       	brcs	.-18     	; 0x1204 <__mulsf3_pse+0xae>
    1216:	99 23       	and	r25, r25
    1218:	c9 f3       	breq	.-14     	; 0x120c <__mulsf3_pse+0xb6>
    121a:	b6 f3       	brts	.-20     	; 0x1208 <__mulsf3_pse+0xb2>
    121c:	9f 57       	subi	r25, 0x7F	; 127
    121e:	55 0b       	sbc	r21, r21
    1220:	87 ff       	sbrs	r24, 7
    1222:	0e 94 56 09 	call	0x12ac	; 0x12ac <__fp_norm2>
    1226:	00 24       	eor	r0, r0
    1228:	a0 e6       	ldi	r26, 0x60	; 96
    122a:	40 ea       	ldi	r20, 0xA0	; 160
    122c:	90 01       	movw	r18, r0
    122e:	80 58       	subi	r24, 0x80	; 128
    1230:	56 95       	lsr	r21
    1232:	97 95       	ror	r25
    1234:	28 f4       	brcc	.+10     	; 0x1240 <sqrt+0x30>
    1236:	80 5c       	subi	r24, 0xC0	; 192
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	20 f0       	brcs	.+8      	; 0x1248 <sqrt+0x38>
    1240:	26 17       	cp	r18, r22
    1242:	37 07       	cpc	r19, r23
    1244:	48 07       	cpc	r20, r24
    1246:	30 f4       	brcc	.+12     	; 0x1254 <sqrt+0x44>
    1248:	62 1b       	sub	r22, r18
    124a:	73 0b       	sbc	r23, r19
    124c:	84 0b       	sbc	r24, r20
    124e:	20 29       	or	r18, r0
    1250:	31 29       	or	r19, r1
    1252:	4a 2b       	or	r20, r26
    1254:	a6 95       	lsr	r26
    1256:	17 94       	ror	r1
    1258:	07 94       	ror	r0
    125a:	20 25       	eor	r18, r0
    125c:	31 25       	eor	r19, r1
    125e:	4a 27       	eor	r20, r26
    1260:	58 f7       	brcc	.-42     	; 0x1238 <sqrt+0x28>
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	20 f0       	brcs	.+8      	; 0x1272 <sqrt+0x62>
    126a:	26 17       	cp	r18, r22
    126c:	37 07       	cpc	r19, r23
    126e:	48 07       	cpc	r20, r24
    1270:	30 f4       	brcc	.+12     	; 0x127e <sqrt+0x6e>
    1272:	62 0b       	sbc	r22, r18
    1274:	73 0b       	sbc	r23, r19
    1276:	84 0b       	sbc	r24, r20
    1278:	20 0d       	add	r18, r0
    127a:	31 1d       	adc	r19, r1
    127c:	41 1d       	adc	r20, r1
    127e:	a0 95       	com	r26
    1280:	81 f7       	brne	.-32     	; 0x1262 <sqrt+0x52>
    1282:	b9 01       	movw	r22, r18
    1284:	84 2f       	mov	r24, r20
    1286:	91 58       	subi	r25, 0x81	; 129
    1288:	88 0f       	add	r24, r24
    128a:	96 95       	lsr	r25
    128c:	87 95       	ror	r24
    128e:	08 95       	ret

00001290 <__fp_mpack>:
    1290:	9f 3f       	cpi	r25, 0xFF	; 255
    1292:	31 f0       	breq	.+12     	; 0x12a0 <__fp_mpack_finite+0xc>

00001294 <__fp_mpack_finite>:
    1294:	91 50       	subi	r25, 0x01	; 1
    1296:	20 f4       	brcc	.+8      	; 0x12a0 <__fp_mpack_finite+0xc>
    1298:	87 95       	ror	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	88 0f       	add	r24, r24
    12a2:	91 1d       	adc	r25, r1
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	97 f9       	bld	r25, 7
    12aa:	08 95       	ret

000012ac <__fp_norm2>:
    12ac:	91 50       	subi	r25, 0x01	; 1
    12ae:	50 40       	sbci	r21, 0x00	; 0
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	88 1f       	adc	r24, r24
    12b6:	d2 f7       	brpl	.-12     	; 0x12ac <__fp_norm2>
    12b8:	08 95       	ret

000012ba <__fp_powsodd>:
    12ba:	9f 93       	push	r25
    12bc:	8f 93       	push	r24
    12be:	7f 93       	push	r23
    12c0:	6f 93       	push	r22
    12c2:	ff 93       	push	r31
    12c4:	ef 93       	push	r30
    12c6:	9b 01       	movw	r18, r22
    12c8:	ac 01       	movw	r20, r24
    12ca:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
    12ce:	ef 91       	pop	r30
    12d0:	ff 91       	pop	r31
    12d2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_powser>
    12d6:	2f 91       	pop	r18
    12d8:	3f 91       	pop	r19
    12da:	4f 91       	pop	r20
    12dc:	5f 91       	pop	r21
    12de:	0c 94 95 08 	jmp	0x112a	; 0x112a <__mulsf3>

000012e2 <__fp_powser>:
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	1f 93       	push	r17
    12e8:	0f 93       	push	r16
    12ea:	ff 92       	push	r15
    12ec:	ef 92       	push	r14
    12ee:	df 92       	push	r13
    12f0:	7b 01       	movw	r14, r22
    12f2:	8c 01       	movw	r16, r24
    12f4:	68 94       	set
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <__fp_powser+0x22>
    12f8:	da 2e       	mov	r13, r26
    12fa:	ef 01       	movw	r28, r30
    12fc:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3x>
    1300:	fe 01       	movw	r30, r28
    1302:	e8 94       	clt
    1304:	a5 91       	lpm	r26, Z+
    1306:	25 91       	lpm	r18, Z+
    1308:	35 91       	lpm	r19, Z+
    130a:	45 91       	lpm	r20, Z+
    130c:	55 91       	lpm	r21, Z+
    130e:	a6 f3       	brts	.-24     	; 0x12f8 <__fp_powser+0x16>
    1310:	ef 01       	movw	r28, r30
    1312:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__addsf3x>
    1316:	fe 01       	movw	r30, r28
    1318:	97 01       	movw	r18, r14
    131a:	a8 01       	movw	r20, r16
    131c:	da 94       	dec	r13
    131e:	69 f7       	brne	.-38     	; 0x12fa <__fp_powser+0x18>
    1320:	df 90       	pop	r13
    1322:	ef 90       	pop	r14
    1324:	ff 90       	pop	r15
    1326:	0f 91       	pop	r16
    1328:	1f 91       	pop	r17
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <__mulsi3>:
    1330:	db 01       	movw	r26, r22
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	0e 94 11 0a 	call	0x1422	; 0x1422 <__muluhisi3>
    133a:	bf 91       	pop	r27
    133c:	af 91       	pop	r26
    133e:	a2 9f       	mul	r26, r18
    1340:	80 0d       	add	r24, r0
    1342:	91 1d       	adc	r25, r1
    1344:	a3 9f       	mul	r26, r19
    1346:	90 0d       	add	r25, r0
    1348:	b2 9f       	mul	r27, r18
    134a:	90 0d       	add	r25, r0
    134c:	11 24       	eor	r1, r1
    134e:	08 95       	ret

00001350 <__udivmodhi4>:
    1350:	aa 1b       	sub	r26, r26
    1352:	bb 1b       	sub	r27, r27
    1354:	51 e1       	ldi	r21, 0x11	; 17
    1356:	07 c0       	rjmp	.+14     	; 0x1366 <__udivmodhi4_ep>

00001358 <__udivmodhi4_loop>:
    1358:	aa 1f       	adc	r26, r26
    135a:	bb 1f       	adc	r27, r27
    135c:	a6 17       	cp	r26, r22
    135e:	b7 07       	cpc	r27, r23
    1360:	10 f0       	brcs	.+4      	; 0x1366 <__udivmodhi4_ep>
    1362:	a6 1b       	sub	r26, r22
    1364:	b7 0b       	sbc	r27, r23

00001366 <__udivmodhi4_ep>:
    1366:	88 1f       	adc	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	5a 95       	dec	r21
    136c:	a9 f7       	brne	.-22     	; 0x1358 <__udivmodhi4_loop>
    136e:	80 95       	com	r24
    1370:	90 95       	com	r25
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	08 95       	ret

00001378 <__divmodhi4>:
    1378:	97 fb       	bst	r25, 7
    137a:	07 2e       	mov	r0, r23
    137c:	16 f4       	brtc	.+4      	; 0x1382 <__divmodhi4+0xa>
    137e:	00 94       	com	r0
    1380:	07 d0       	rcall	.+14     	; 0x1390 <__divmodhi4_neg1>
    1382:	77 fd       	sbrc	r23, 7
    1384:	09 d0       	rcall	.+18     	; 0x1398 <__divmodhi4_neg2>
    1386:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
    138a:	07 fc       	sbrc	r0, 7
    138c:	05 d0       	rcall	.+10     	; 0x1398 <__divmodhi4_neg2>
    138e:	3e f4       	brtc	.+14     	; 0x139e <__divmodhi4_exit>

00001390 <__divmodhi4_neg1>:
    1390:	90 95       	com	r25
    1392:	81 95       	neg	r24
    1394:	9f 4f       	sbci	r25, 0xFF	; 255
    1396:	08 95       	ret

00001398 <__divmodhi4_neg2>:
    1398:	70 95       	com	r23
    139a:	61 95       	neg	r22
    139c:	7f 4f       	sbci	r23, 0xFF	; 255

0000139e <__divmodhi4_exit>:
    139e:	08 95       	ret

000013a0 <__udivmodsi4>:
    13a0:	a1 e2       	ldi	r26, 0x21	; 33
    13a2:	1a 2e       	mov	r1, r26
    13a4:	aa 1b       	sub	r26, r26
    13a6:	bb 1b       	sub	r27, r27
    13a8:	fd 01       	movw	r30, r26
    13aa:	0d c0       	rjmp	.+26     	; 0x13c6 <__udivmodsi4_ep>

000013ac <__udivmodsi4_loop>:
    13ac:	aa 1f       	adc	r26, r26
    13ae:	bb 1f       	adc	r27, r27
    13b0:	ee 1f       	adc	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	a2 17       	cp	r26, r18
    13b6:	b3 07       	cpc	r27, r19
    13b8:	e4 07       	cpc	r30, r20
    13ba:	f5 07       	cpc	r31, r21
    13bc:	20 f0       	brcs	.+8      	; 0x13c6 <__udivmodsi4_ep>
    13be:	a2 1b       	sub	r26, r18
    13c0:	b3 0b       	sbc	r27, r19
    13c2:	e4 0b       	sbc	r30, r20
    13c4:	f5 0b       	sbc	r31, r21

000013c6 <__udivmodsi4_ep>:
    13c6:	66 1f       	adc	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	1a 94       	dec	r1
    13d0:	69 f7       	brne	.-38     	; 0x13ac <__udivmodsi4_loop>
    13d2:	60 95       	com	r22
    13d4:	70 95       	com	r23
    13d6:	80 95       	com	r24
    13d8:	90 95       	com	r25
    13da:	9b 01       	movw	r18, r22
    13dc:	ac 01       	movw	r20, r24
    13de:	bd 01       	movw	r22, r26
    13e0:	cf 01       	movw	r24, r30
    13e2:	08 95       	ret

000013e4 <__divmodsi4>:
    13e4:	05 2e       	mov	r0, r21
    13e6:	97 fb       	bst	r25, 7
    13e8:	1e f4       	brtc	.+6      	; 0x13f0 <__divmodsi4+0xc>
    13ea:	00 94       	com	r0
    13ec:	0e 94 09 0a 	call	0x1412	; 0x1412 <__negsi2>
    13f0:	57 fd       	sbrc	r21, 7
    13f2:	07 d0       	rcall	.+14     	; 0x1402 <__divmodsi4_neg2>
    13f4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
    13f8:	07 fc       	sbrc	r0, 7
    13fa:	03 d0       	rcall	.+6      	; 0x1402 <__divmodsi4_neg2>
    13fc:	4e f4       	brtc	.+18     	; 0x1410 <__divmodsi4_exit>
    13fe:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__negsi2>

00001402 <__divmodsi4_neg2>:
    1402:	50 95       	com	r21
    1404:	40 95       	com	r20
    1406:	30 95       	com	r19
    1408:	21 95       	neg	r18
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	4f 4f       	sbci	r20, 0xFF	; 255
    140e:	5f 4f       	sbci	r21, 0xFF	; 255

00001410 <__divmodsi4_exit>:
    1410:	08 95       	ret

00001412 <__negsi2>:
    1412:	90 95       	com	r25
    1414:	80 95       	com	r24
    1416:	70 95       	com	r23
    1418:	61 95       	neg	r22
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	8f 4f       	sbci	r24, 0xFF	; 255
    141e:	9f 4f       	sbci	r25, 0xFF	; 255
    1420:	08 95       	ret

00001422 <__muluhisi3>:
    1422:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__umulhisi3>
    1426:	a5 9f       	mul	r26, r21
    1428:	90 0d       	add	r25, r0
    142a:	b4 9f       	mul	r27, r20
    142c:	90 0d       	add	r25, r0
    142e:	a4 9f       	mul	r26, r20
    1430:	80 0d       	add	r24, r0
    1432:	91 1d       	adc	r25, r1
    1434:	11 24       	eor	r1, r1
    1436:	08 95       	ret

00001438 <__umulsidi3>:
    1438:	e8 94       	clt

0000143a <__umulsidi3_helper>:
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	fc 01       	movw	r30, r24
    1440:	db 01       	movw	r26, r22
    1442:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__umulhisi3>
    1446:	7f 93       	push	r23
    1448:	6f 93       	push	r22
    144a:	e9 01       	movw	r28, r18
    144c:	9a 01       	movw	r18, r20
    144e:	ac 01       	movw	r20, r24
    1450:	bf 93       	push	r27
    1452:	af 93       	push	r26
    1454:	3f 93       	push	r19
    1456:	2f 93       	push	r18
    1458:	df 01       	movw	r26, r30
    145a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__umulhisi3>
    145e:	26 f4       	brtc	.+8      	; 0x1468 <__umulsidi3_helper+0x2e>
    1460:	6c 1b       	sub	r22, r28
    1462:	7d 0b       	sbc	r23, r29
    1464:	82 0b       	sbc	r24, r18
    1466:	93 0b       	sbc	r25, r19
    1468:	9e 01       	movw	r18, r28
    146a:	eb 01       	movw	r28, r22
    146c:	fc 01       	movw	r30, r24
    146e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__muldi3_6>
    1472:	af 91       	pop	r26
    1474:	bf 91       	pop	r27
    1476:	2f 91       	pop	r18
    1478:	3f 91       	pop	r19
    147a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__muldi3_6>
    147e:	be 01       	movw	r22, r28
    1480:	cf 01       	movw	r24, r30
    1482:	f9 01       	movw	r30, r18
    1484:	2f 91       	pop	r18
    1486:	3f 91       	pop	r19
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <__ashrdi3>:
    148e:	97 fb       	bst	r25, 7
    1490:	10 f8       	bld	r1, 0

00001492 <__lshrdi3>:
    1492:	16 94       	lsr	r1
    1494:	00 08       	sbc	r0, r0
    1496:	0f 93       	push	r16
    1498:	08 30       	cpi	r16, 0x08	; 8
    149a:	98 f0       	brcs	.+38     	; 0x14c2 <__lshrdi3+0x30>
    149c:	08 50       	subi	r16, 0x08	; 8
    149e:	23 2f       	mov	r18, r19
    14a0:	34 2f       	mov	r19, r20
    14a2:	45 2f       	mov	r20, r21
    14a4:	56 2f       	mov	r21, r22
    14a6:	67 2f       	mov	r22, r23
    14a8:	78 2f       	mov	r23, r24
    14aa:	89 2f       	mov	r24, r25
    14ac:	90 2d       	mov	r25, r0
    14ae:	f4 cf       	rjmp	.-24     	; 0x1498 <__lshrdi3+0x6>
    14b0:	05 94       	asr	r0
    14b2:	97 95       	ror	r25
    14b4:	87 95       	ror	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	57 95       	ror	r21
    14bc:	47 95       	ror	r20
    14be:	37 95       	ror	r19
    14c0:	27 95       	ror	r18
    14c2:	0a 95       	dec	r16
    14c4:	aa f7       	brpl	.-22     	; 0x14b0 <__lshrdi3+0x1e>
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <__umulhisi3>:
    14ca:	a2 9f       	mul	r26, r18
    14cc:	b0 01       	movw	r22, r0
    14ce:	b3 9f       	mul	r27, r19
    14d0:	c0 01       	movw	r24, r0
    14d2:	a3 9f       	mul	r26, r19
    14d4:	70 0d       	add	r23, r0
    14d6:	81 1d       	adc	r24, r1
    14d8:	11 24       	eor	r1, r1
    14da:	91 1d       	adc	r25, r1
    14dc:	b2 9f       	mul	r27, r18
    14de:	70 0d       	add	r23, r0
    14e0:	81 1d       	adc	r24, r1
    14e2:	11 24       	eor	r1, r1
    14e4:	91 1d       	adc	r25, r1
    14e6:	08 95       	ret

000014e8 <__muldi3_6>:
    14e8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__umulhisi3>
    14ec:	46 0f       	add	r20, r22
    14ee:	57 1f       	adc	r21, r23
    14f0:	c8 1f       	adc	r28, r24
    14f2:	d9 1f       	adc	r29, r25
    14f4:	08 f4       	brcc	.+2      	; 0x14f8 <__muldi3_6+0x10>
    14f6:	31 96       	adiw	r30, 0x01	; 1
    14f8:	08 95       	ret

000014fa <printf>:
    14fa:	a0 e0       	ldi	r26, 0x00	; 0
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e3 e8       	ldi	r30, 0x83	; 131
    1500:	fa e0       	ldi	r31, 0x0A	; 10
    1502:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__prologue_saves__+0x20>
    1506:	ae 01       	movw	r20, r28
    1508:	4b 5f       	subi	r20, 0xFB	; 251
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	fa 01       	movw	r30, r20
    150e:	61 91       	ld	r22, Z+
    1510:	71 91       	ld	r23, Z+
    1512:	af 01       	movw	r20, r30
    1514:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__iob+0x2>
    1518:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__iob+0x3>
    151c:	0e 94 93 0a 	call	0x1526	; 0x1526 <vfprintf>
    1520:	e2 e0       	ldi	r30, 0x02	; 2
    1522:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__epilogue_restores__+0x20>

00001526 <vfprintf>:
    1526:	ab e0       	ldi	r26, 0x0B	; 11
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e9       	ldi	r30, 0x99	; 153
    152c:	fa e0       	ldi	r31, 0x0A	; 10
    152e:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__prologue_saves__>
    1532:	6c 01       	movw	r12, r24
    1534:	7b 01       	movw	r14, r22
    1536:	8a 01       	movw	r16, r20
    1538:	fc 01       	movw	r30, r24
    153a:	17 82       	std	Z+7, r1	; 0x07
    153c:	16 82       	std	Z+6, r1	; 0x06
    153e:	83 81       	ldd	r24, Z+3	; 0x03
    1540:	81 ff       	sbrs	r24, 1
    1542:	cc c1       	rjmp	.+920    	; 0x18dc <vfprintf+0x3b6>
    1544:	ce 01       	movw	r24, r28
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	3c 01       	movw	r6, r24
    154a:	f6 01       	movw	r30, r12
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	f7 01       	movw	r30, r14
    1550:	93 fd       	sbrc	r25, 3
    1552:	85 91       	lpm	r24, Z+
    1554:	93 ff       	sbrs	r25, 3
    1556:	81 91       	ld	r24, Z+
    1558:	7f 01       	movw	r14, r30
    155a:	88 23       	and	r24, r24
    155c:	09 f4       	brne	.+2      	; 0x1560 <vfprintf+0x3a>
    155e:	ba c1       	rjmp	.+884    	; 0x18d4 <vfprintf+0x3ae>
    1560:	85 32       	cpi	r24, 0x25	; 37
    1562:	39 f4       	brne	.+14     	; 0x1572 <vfprintf+0x4c>
    1564:	93 fd       	sbrc	r25, 3
    1566:	85 91       	lpm	r24, Z+
    1568:	93 ff       	sbrs	r25, 3
    156a:	81 91       	ld	r24, Z+
    156c:	7f 01       	movw	r14, r30
    156e:	85 32       	cpi	r24, 0x25	; 37
    1570:	29 f4       	brne	.+10     	; 0x157c <vfprintf+0x56>
    1572:	b6 01       	movw	r22, r12
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    157a:	e7 cf       	rjmp	.-50     	; 0x154a <vfprintf+0x24>
    157c:	91 2c       	mov	r9, r1
    157e:	21 2c       	mov	r2, r1
    1580:	31 2c       	mov	r3, r1
    1582:	ff e1       	ldi	r31, 0x1F	; 31
    1584:	f3 15       	cp	r31, r3
    1586:	d8 f0       	brcs	.+54     	; 0x15be <vfprintf+0x98>
    1588:	8b 32       	cpi	r24, 0x2B	; 43
    158a:	79 f0       	breq	.+30     	; 0x15aa <vfprintf+0x84>
    158c:	38 f4       	brcc	.+14     	; 0x159c <vfprintf+0x76>
    158e:	80 32       	cpi	r24, 0x20	; 32
    1590:	79 f0       	breq	.+30     	; 0x15b0 <vfprintf+0x8a>
    1592:	83 32       	cpi	r24, 0x23	; 35
    1594:	a1 f4       	brne	.+40     	; 0x15be <vfprintf+0x98>
    1596:	23 2d       	mov	r18, r3
    1598:	20 61       	ori	r18, 0x10	; 16
    159a:	1d c0       	rjmp	.+58     	; 0x15d6 <vfprintf+0xb0>
    159c:	8d 32       	cpi	r24, 0x2D	; 45
    159e:	61 f0       	breq	.+24     	; 0x15b8 <vfprintf+0x92>
    15a0:	80 33       	cpi	r24, 0x30	; 48
    15a2:	69 f4       	brne	.+26     	; 0x15be <vfprintf+0x98>
    15a4:	23 2d       	mov	r18, r3
    15a6:	21 60       	ori	r18, 0x01	; 1
    15a8:	16 c0       	rjmp	.+44     	; 0x15d6 <vfprintf+0xb0>
    15aa:	83 2d       	mov	r24, r3
    15ac:	82 60       	ori	r24, 0x02	; 2
    15ae:	38 2e       	mov	r3, r24
    15b0:	e3 2d       	mov	r30, r3
    15b2:	e4 60       	ori	r30, 0x04	; 4
    15b4:	3e 2e       	mov	r3, r30
    15b6:	2a c0       	rjmp	.+84     	; 0x160c <vfprintf+0xe6>
    15b8:	f3 2d       	mov	r31, r3
    15ba:	f8 60       	ori	r31, 0x08	; 8
    15bc:	1d c0       	rjmp	.+58     	; 0x15f8 <vfprintf+0xd2>
    15be:	37 fc       	sbrc	r3, 7
    15c0:	2d c0       	rjmp	.+90     	; 0x161c <vfprintf+0xf6>
    15c2:	20 ed       	ldi	r18, 0xD0	; 208
    15c4:	28 0f       	add	r18, r24
    15c6:	2a 30       	cpi	r18, 0x0A	; 10
    15c8:	40 f0       	brcs	.+16     	; 0x15da <vfprintf+0xb4>
    15ca:	8e 32       	cpi	r24, 0x2E	; 46
    15cc:	b9 f4       	brne	.+46     	; 0x15fc <vfprintf+0xd6>
    15ce:	36 fc       	sbrc	r3, 6
    15d0:	81 c1       	rjmp	.+770    	; 0x18d4 <vfprintf+0x3ae>
    15d2:	23 2d       	mov	r18, r3
    15d4:	20 64       	ori	r18, 0x40	; 64
    15d6:	32 2e       	mov	r3, r18
    15d8:	19 c0       	rjmp	.+50     	; 0x160c <vfprintf+0xe6>
    15da:	36 fe       	sbrs	r3, 6
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <vfprintf+0xc4>
    15de:	8a e0       	ldi	r24, 0x0A	; 10
    15e0:	98 9e       	mul	r9, r24
    15e2:	20 0d       	add	r18, r0
    15e4:	11 24       	eor	r1, r1
    15e6:	92 2e       	mov	r9, r18
    15e8:	11 c0       	rjmp	.+34     	; 0x160c <vfprintf+0xe6>
    15ea:	ea e0       	ldi	r30, 0x0A	; 10
    15ec:	2e 9e       	mul	r2, r30
    15ee:	20 0d       	add	r18, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	22 2e       	mov	r2, r18
    15f4:	f3 2d       	mov	r31, r3
    15f6:	f0 62       	ori	r31, 0x20	; 32
    15f8:	3f 2e       	mov	r3, r31
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <vfprintf+0xe6>
    15fc:	8c 36       	cpi	r24, 0x6C	; 108
    15fe:	21 f4       	brne	.+8      	; 0x1608 <vfprintf+0xe2>
    1600:	83 2d       	mov	r24, r3
    1602:	80 68       	ori	r24, 0x80	; 128
    1604:	38 2e       	mov	r3, r24
    1606:	02 c0       	rjmp	.+4      	; 0x160c <vfprintf+0xe6>
    1608:	88 36       	cpi	r24, 0x68	; 104
    160a:	41 f4       	brne	.+16     	; 0x161c <vfprintf+0xf6>
    160c:	f7 01       	movw	r30, r14
    160e:	93 fd       	sbrc	r25, 3
    1610:	85 91       	lpm	r24, Z+
    1612:	93 ff       	sbrs	r25, 3
    1614:	81 91       	ld	r24, Z+
    1616:	7f 01       	movw	r14, r30
    1618:	81 11       	cpse	r24, r1
    161a:	b3 cf       	rjmp	.-154    	; 0x1582 <vfprintf+0x5c>
    161c:	98 2f       	mov	r25, r24
    161e:	9f 7d       	andi	r25, 0xDF	; 223
    1620:	95 54       	subi	r25, 0x45	; 69
    1622:	93 30       	cpi	r25, 0x03	; 3
    1624:	28 f4       	brcc	.+10     	; 0x1630 <vfprintf+0x10a>
    1626:	0c 5f       	subi	r16, 0xFC	; 252
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	9f e3       	ldi	r25, 0x3F	; 63
    162c:	99 83       	std	Y+1, r25	; 0x01
    162e:	0d c0       	rjmp	.+26     	; 0x164a <vfprintf+0x124>
    1630:	83 36       	cpi	r24, 0x63	; 99
    1632:	31 f0       	breq	.+12     	; 0x1640 <vfprintf+0x11a>
    1634:	83 37       	cpi	r24, 0x73	; 115
    1636:	71 f0       	breq	.+28     	; 0x1654 <vfprintf+0x12e>
    1638:	83 35       	cpi	r24, 0x53	; 83
    163a:	09 f0       	breq	.+2      	; 0x163e <vfprintf+0x118>
    163c:	59 c0       	rjmp	.+178    	; 0x16f0 <vfprintf+0x1ca>
    163e:	21 c0       	rjmp	.+66     	; 0x1682 <vfprintf+0x15c>
    1640:	f8 01       	movw	r30, r16
    1642:	80 81       	ld	r24, Z
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	0e 5f       	subi	r16, 0xFE	; 254
    1648:	1f 4f       	sbci	r17, 0xFF	; 255
    164a:	88 24       	eor	r8, r8
    164c:	83 94       	inc	r8
    164e:	91 2c       	mov	r9, r1
    1650:	53 01       	movw	r10, r6
    1652:	13 c0       	rjmp	.+38     	; 0x167a <vfprintf+0x154>
    1654:	28 01       	movw	r4, r16
    1656:	f2 e0       	ldi	r31, 0x02	; 2
    1658:	4f 0e       	add	r4, r31
    165a:	51 1c       	adc	r5, r1
    165c:	f8 01       	movw	r30, r16
    165e:	a0 80       	ld	r10, Z
    1660:	b1 80       	ldd	r11, Z+1	; 0x01
    1662:	36 fe       	sbrs	r3, 6
    1664:	03 c0       	rjmp	.+6      	; 0x166c <vfprintf+0x146>
    1666:	69 2d       	mov	r22, r9
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <vfprintf+0x14a>
    166c:	6f ef       	ldi	r22, 0xFF	; 255
    166e:	7f ef       	ldi	r23, 0xFF	; 255
    1670:	c5 01       	movw	r24, r10
    1672:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <strnlen>
    1676:	4c 01       	movw	r8, r24
    1678:	82 01       	movw	r16, r4
    167a:	f3 2d       	mov	r31, r3
    167c:	ff 77       	andi	r31, 0x7F	; 127
    167e:	3f 2e       	mov	r3, r31
    1680:	16 c0       	rjmp	.+44     	; 0x16ae <vfprintf+0x188>
    1682:	28 01       	movw	r4, r16
    1684:	22 e0       	ldi	r18, 0x02	; 2
    1686:	42 0e       	add	r4, r18
    1688:	51 1c       	adc	r5, r1
    168a:	f8 01       	movw	r30, r16
    168c:	a0 80       	ld	r10, Z
    168e:	b1 80       	ldd	r11, Z+1	; 0x01
    1690:	36 fe       	sbrs	r3, 6
    1692:	03 c0       	rjmp	.+6      	; 0x169a <vfprintf+0x174>
    1694:	69 2d       	mov	r22, r9
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfprintf+0x178>
    169a:	6f ef       	ldi	r22, 0xFF	; 255
    169c:	7f ef       	ldi	r23, 0xFF	; 255
    169e:	c5 01       	movw	r24, r10
    16a0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <strnlen_P>
    16a4:	4c 01       	movw	r8, r24
    16a6:	f3 2d       	mov	r31, r3
    16a8:	f0 68       	ori	r31, 0x80	; 128
    16aa:	3f 2e       	mov	r3, r31
    16ac:	82 01       	movw	r16, r4
    16ae:	33 fc       	sbrc	r3, 3
    16b0:	1b c0       	rjmp	.+54     	; 0x16e8 <vfprintf+0x1c2>
    16b2:	82 2d       	mov	r24, r2
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	88 16       	cp	r8, r24
    16b8:	99 06       	cpc	r9, r25
    16ba:	b0 f4       	brcc	.+44     	; 0x16e8 <vfprintf+0x1c2>
    16bc:	b6 01       	movw	r22, r12
    16be:	80 e2       	ldi	r24, 0x20	; 32
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    16c6:	2a 94       	dec	r2
    16c8:	f4 cf       	rjmp	.-24     	; 0x16b2 <vfprintf+0x18c>
    16ca:	f5 01       	movw	r30, r10
    16cc:	37 fc       	sbrc	r3, 7
    16ce:	85 91       	lpm	r24, Z+
    16d0:	37 fe       	sbrs	r3, 7
    16d2:	81 91       	ld	r24, Z+
    16d4:	5f 01       	movw	r10, r30
    16d6:	b6 01       	movw	r22, r12
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    16de:	21 10       	cpse	r2, r1
    16e0:	2a 94       	dec	r2
    16e2:	21 e0       	ldi	r18, 0x01	; 1
    16e4:	82 1a       	sub	r8, r18
    16e6:	91 08       	sbc	r9, r1
    16e8:	81 14       	cp	r8, r1
    16ea:	91 04       	cpc	r9, r1
    16ec:	71 f7       	brne	.-36     	; 0x16ca <vfprintf+0x1a4>
    16ee:	e8 c0       	rjmp	.+464    	; 0x18c0 <vfprintf+0x39a>
    16f0:	84 36       	cpi	r24, 0x64	; 100
    16f2:	11 f0       	breq	.+4      	; 0x16f8 <vfprintf+0x1d2>
    16f4:	89 36       	cpi	r24, 0x69	; 105
    16f6:	41 f5       	brne	.+80     	; 0x1748 <vfprintf+0x222>
    16f8:	f8 01       	movw	r30, r16
    16fa:	37 fe       	sbrs	r3, 7
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <vfprintf+0x1e6>
    16fe:	60 81       	ld	r22, Z
    1700:	71 81       	ldd	r23, Z+1	; 0x01
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	0c 5f       	subi	r16, 0xFC	; 252
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	08 c0       	rjmp	.+16     	; 0x171c <vfprintf+0x1f6>
    170c:	60 81       	ld	r22, Z
    170e:	71 81       	ldd	r23, Z+1	; 0x01
    1710:	07 2e       	mov	r0, r23
    1712:	00 0c       	add	r0, r0
    1714:	88 0b       	sbc	r24, r24
    1716:	99 0b       	sbc	r25, r25
    1718:	0e 5f       	subi	r16, 0xFE	; 254
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	f3 2d       	mov	r31, r3
    171e:	ff 76       	andi	r31, 0x6F	; 111
    1720:	3f 2e       	mov	r3, r31
    1722:	97 ff       	sbrs	r25, 7
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <vfprintf+0x212>
    1726:	90 95       	com	r25
    1728:	80 95       	com	r24
    172a:	70 95       	com	r23
    172c:	61 95       	neg	r22
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	f0 68       	ori	r31, 0x80	; 128
    1736:	3f 2e       	mov	r3, r31
    1738:	2a e0       	ldi	r18, 0x0A	; 10
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	a3 01       	movw	r20, r6
    173e:	0e 94 c6 0c 	call	0x198c	; 0x198c <__ultoa_invert>
    1742:	88 2e       	mov	r8, r24
    1744:	86 18       	sub	r8, r6
    1746:	45 c0       	rjmp	.+138    	; 0x17d2 <vfprintf+0x2ac>
    1748:	85 37       	cpi	r24, 0x75	; 117
    174a:	31 f4       	brne	.+12     	; 0x1758 <vfprintf+0x232>
    174c:	23 2d       	mov	r18, r3
    174e:	2f 7e       	andi	r18, 0xEF	; 239
    1750:	b2 2e       	mov	r11, r18
    1752:	2a e0       	ldi	r18, 0x0A	; 10
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	25 c0       	rjmp	.+74     	; 0x17a2 <vfprintf+0x27c>
    1758:	93 2d       	mov	r25, r3
    175a:	99 7f       	andi	r25, 0xF9	; 249
    175c:	b9 2e       	mov	r11, r25
    175e:	8f 36       	cpi	r24, 0x6F	; 111
    1760:	c1 f0       	breq	.+48     	; 0x1792 <vfprintf+0x26c>
    1762:	18 f4       	brcc	.+6      	; 0x176a <vfprintf+0x244>
    1764:	88 35       	cpi	r24, 0x58	; 88
    1766:	79 f0       	breq	.+30     	; 0x1786 <vfprintf+0x260>
    1768:	b5 c0       	rjmp	.+362    	; 0x18d4 <vfprintf+0x3ae>
    176a:	80 37       	cpi	r24, 0x70	; 112
    176c:	19 f0       	breq	.+6      	; 0x1774 <vfprintf+0x24e>
    176e:	88 37       	cpi	r24, 0x78	; 120
    1770:	21 f0       	breq	.+8      	; 0x177a <vfprintf+0x254>
    1772:	b0 c0       	rjmp	.+352    	; 0x18d4 <vfprintf+0x3ae>
    1774:	e9 2f       	mov	r30, r25
    1776:	e0 61       	ori	r30, 0x10	; 16
    1778:	be 2e       	mov	r11, r30
    177a:	b4 fe       	sbrs	r11, 4
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <vfprintf+0x272>
    177e:	fb 2d       	mov	r31, r11
    1780:	f4 60       	ori	r31, 0x04	; 4
    1782:	bf 2e       	mov	r11, r31
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <vfprintf+0x272>
    1786:	34 fe       	sbrs	r3, 4
    1788:	0a c0       	rjmp	.+20     	; 0x179e <vfprintf+0x278>
    178a:	29 2f       	mov	r18, r25
    178c:	26 60       	ori	r18, 0x06	; 6
    178e:	b2 2e       	mov	r11, r18
    1790:	06 c0       	rjmp	.+12     	; 0x179e <vfprintf+0x278>
    1792:	28 e0       	ldi	r18, 0x08	; 8
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <vfprintf+0x27c>
    1798:	20 e1       	ldi	r18, 0x10	; 16
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x27c>
    179e:	20 e1       	ldi	r18, 0x10	; 16
    17a0:	32 e0       	ldi	r19, 0x02	; 2
    17a2:	f8 01       	movw	r30, r16
    17a4:	b7 fe       	sbrs	r11, 7
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <vfprintf+0x290>
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	0c 5f       	subi	r16, 0xFC	; 252
    17b2:	1f 4f       	sbci	r17, 0xFF	; 255
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <vfprintf+0x29c>
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 5f       	subi	r16, 0xFE	; 254
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	a3 01       	movw	r20, r6
    17c4:	0e 94 c6 0c 	call	0x198c	; 0x198c <__ultoa_invert>
    17c8:	88 2e       	mov	r8, r24
    17ca:	86 18       	sub	r8, r6
    17cc:	fb 2d       	mov	r31, r11
    17ce:	ff 77       	andi	r31, 0x7F	; 127
    17d0:	3f 2e       	mov	r3, r31
    17d2:	36 fe       	sbrs	r3, 6
    17d4:	0d c0       	rjmp	.+26     	; 0x17f0 <vfprintf+0x2ca>
    17d6:	23 2d       	mov	r18, r3
    17d8:	2e 7f       	andi	r18, 0xFE	; 254
    17da:	a2 2e       	mov	r10, r18
    17dc:	89 14       	cp	r8, r9
    17de:	58 f4       	brcc	.+22     	; 0x17f6 <vfprintf+0x2d0>
    17e0:	34 fe       	sbrs	r3, 4
    17e2:	0b c0       	rjmp	.+22     	; 0x17fa <vfprintf+0x2d4>
    17e4:	32 fc       	sbrc	r3, 2
    17e6:	09 c0       	rjmp	.+18     	; 0x17fa <vfprintf+0x2d4>
    17e8:	83 2d       	mov	r24, r3
    17ea:	8e 7e       	andi	r24, 0xEE	; 238
    17ec:	a8 2e       	mov	r10, r24
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <vfprintf+0x2d4>
    17f0:	b8 2c       	mov	r11, r8
    17f2:	a3 2c       	mov	r10, r3
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <vfprintf+0x2d6>
    17f6:	b8 2c       	mov	r11, r8
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <vfprintf+0x2d6>
    17fa:	b9 2c       	mov	r11, r9
    17fc:	a4 fe       	sbrs	r10, 4
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <vfprintf+0x2f8>
    1800:	fe 01       	movw	r30, r28
    1802:	e8 0d       	add	r30, r8
    1804:	f1 1d       	adc	r31, r1
    1806:	80 81       	ld	r24, Z
    1808:	80 33       	cpi	r24, 0x30	; 48
    180a:	21 f4       	brne	.+8      	; 0x1814 <vfprintf+0x2ee>
    180c:	9a 2d       	mov	r25, r10
    180e:	99 7e       	andi	r25, 0xE9	; 233
    1810:	a9 2e       	mov	r10, r25
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <vfprintf+0x300>
    1814:	a2 fe       	sbrs	r10, 2
    1816:	06 c0       	rjmp	.+12     	; 0x1824 <vfprintf+0x2fe>
    1818:	b3 94       	inc	r11
    181a:	b3 94       	inc	r11
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <vfprintf+0x300>
    181e:	8a 2d       	mov	r24, r10
    1820:	86 78       	andi	r24, 0x86	; 134
    1822:	09 f0       	breq	.+2      	; 0x1826 <vfprintf+0x300>
    1824:	b3 94       	inc	r11
    1826:	a3 fc       	sbrc	r10, 3
    1828:	11 c0       	rjmp	.+34     	; 0x184c <vfprintf+0x326>
    182a:	a0 fe       	sbrs	r10, 0
    182c:	06 c0       	rjmp	.+12     	; 0x183a <vfprintf+0x314>
    182e:	b2 14       	cp	r11, r2
    1830:	88 f4       	brcc	.+34     	; 0x1854 <vfprintf+0x32e>
    1832:	28 0c       	add	r2, r8
    1834:	92 2c       	mov	r9, r2
    1836:	9b 18       	sub	r9, r11
    1838:	0e c0       	rjmp	.+28     	; 0x1856 <vfprintf+0x330>
    183a:	b2 14       	cp	r11, r2
    183c:	60 f4       	brcc	.+24     	; 0x1856 <vfprintf+0x330>
    183e:	b6 01       	movw	r22, r12
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    1848:	b3 94       	inc	r11
    184a:	f7 cf       	rjmp	.-18     	; 0x183a <vfprintf+0x314>
    184c:	b2 14       	cp	r11, r2
    184e:	18 f4       	brcc	.+6      	; 0x1856 <vfprintf+0x330>
    1850:	2b 18       	sub	r2, r11
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <vfprintf+0x332>
    1854:	98 2c       	mov	r9, r8
    1856:	21 2c       	mov	r2, r1
    1858:	a4 fe       	sbrs	r10, 4
    185a:	10 c0       	rjmp	.+32     	; 0x187c <vfprintf+0x356>
    185c:	b6 01       	movw	r22, r12
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    1866:	a2 fe       	sbrs	r10, 2
    1868:	17 c0       	rjmp	.+46     	; 0x1898 <vfprintf+0x372>
    186a:	a1 fc       	sbrc	r10, 1
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <vfprintf+0x34e>
    186e:	88 e7       	ldi	r24, 0x78	; 120
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0x352>
    1874:	88 e5       	ldi	r24, 0x58	; 88
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	b6 01       	movw	r22, r12
    187a:	0c c0       	rjmp	.+24     	; 0x1894 <vfprintf+0x36e>
    187c:	8a 2d       	mov	r24, r10
    187e:	86 78       	andi	r24, 0x86	; 134
    1880:	59 f0       	breq	.+22     	; 0x1898 <vfprintf+0x372>
    1882:	a1 fe       	sbrs	r10, 1
    1884:	02 c0       	rjmp	.+4      	; 0x188a <vfprintf+0x364>
    1886:	8b e2       	ldi	r24, 0x2B	; 43
    1888:	01 c0       	rjmp	.+2      	; 0x188c <vfprintf+0x366>
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	a7 fc       	sbrc	r10, 7
    188e:	8d e2       	ldi	r24, 0x2D	; 45
    1890:	b6 01       	movw	r22, r12
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    1898:	89 14       	cp	r8, r9
    189a:	38 f4       	brcc	.+14     	; 0x18aa <vfprintf+0x384>
    189c:	b6 01       	movw	r22, r12
    189e:	80 e3       	ldi	r24, 0x30	; 48
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    18a6:	9a 94       	dec	r9
    18a8:	f7 cf       	rjmp	.-18     	; 0x1898 <vfprintf+0x372>
    18aa:	8a 94       	dec	r8
    18ac:	f3 01       	movw	r30, r6
    18ae:	e8 0d       	add	r30, r8
    18b0:	f1 1d       	adc	r31, r1
    18b2:	80 81       	ld	r24, Z
    18b4:	b6 01       	movw	r22, r12
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    18bc:	81 10       	cpse	r8, r1
    18be:	f5 cf       	rjmp	.-22     	; 0x18aa <vfprintf+0x384>
    18c0:	22 20       	and	r2, r2
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <vfprintf+0x3a0>
    18c4:	42 ce       	rjmp	.-892    	; 0x154a <vfprintf+0x24>
    18c6:	b6 01       	movw	r22, r12
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 8a 0c 	call	0x1914	; 0x1914 <fputc>
    18d0:	2a 94       	dec	r2
    18d2:	f6 cf       	rjmp	.-20     	; 0x18c0 <vfprintf+0x39a>
    18d4:	f6 01       	movw	r30, r12
    18d6:	86 81       	ldd	r24, Z+6	; 0x06
    18d8:	97 81       	ldd	r25, Z+7	; 0x07
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <vfprintf+0x3ba>
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
    18de:	9f ef       	ldi	r25, 0xFF	; 255
    18e0:	2b 96       	adiw	r28, 0x0b	; 11
    18e2:	e2 e1       	ldi	r30, 0x12	; 18
    18e4:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__epilogue_restores__>

000018e8 <strnlen_P>:
    18e8:	fc 01       	movw	r30, r24
    18ea:	05 90       	lpm	r0, Z+
    18ec:	61 50       	subi	r22, 0x01	; 1
    18ee:	70 40       	sbci	r23, 0x00	; 0
    18f0:	01 10       	cpse	r0, r1
    18f2:	d8 f7       	brcc	.-10     	; 0x18ea <strnlen_P+0x2>
    18f4:	80 95       	com	r24
    18f6:	90 95       	com	r25
    18f8:	8e 0f       	add	r24, r30
    18fa:	9f 1f       	adc	r25, r31
    18fc:	08 95       	ret

000018fe <strnlen>:
    18fe:	fc 01       	movw	r30, r24
    1900:	61 50       	subi	r22, 0x01	; 1
    1902:	70 40       	sbci	r23, 0x00	; 0
    1904:	01 90       	ld	r0, Z+
    1906:	01 10       	cpse	r0, r1
    1908:	d8 f7       	brcc	.-10     	; 0x1900 <strnlen+0x2>
    190a:	80 95       	com	r24
    190c:	90 95       	com	r25
    190e:	8e 0f       	add	r24, r30
    1910:	9f 1f       	adc	r25, r31
    1912:	08 95       	ret

00001914 <fputc>:
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	fb 01       	movw	r30, r22
    191e:	23 81       	ldd	r18, Z+3	; 0x03
    1920:	21 fd       	sbrc	r18, 1
    1922:	03 c0       	rjmp	.+6      	; 0x192a <fputc+0x16>
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	2c c0       	rjmp	.+88     	; 0x1982 <fputc+0x6e>
    192a:	22 ff       	sbrs	r18, 2
    192c:	16 c0       	rjmp	.+44     	; 0x195a <fputc+0x46>
    192e:	46 81       	ldd	r20, Z+6	; 0x06
    1930:	57 81       	ldd	r21, Z+7	; 0x07
    1932:	24 81       	ldd	r18, Z+4	; 0x04
    1934:	35 81       	ldd	r19, Z+5	; 0x05
    1936:	42 17       	cp	r20, r18
    1938:	53 07       	cpc	r21, r19
    193a:	44 f4       	brge	.+16     	; 0x194c <fputc+0x38>
    193c:	a0 81       	ld	r26, Z
    193e:	b1 81       	ldd	r27, Z+1	; 0x01
    1940:	9d 01       	movw	r18, r26
    1942:	2f 5f       	subi	r18, 0xFF	; 255
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
    1946:	31 83       	std	Z+1, r19	; 0x01
    1948:	20 83       	st	Z, r18
    194a:	8c 93       	st	X, r24
    194c:	26 81       	ldd	r18, Z+6	; 0x06
    194e:	37 81       	ldd	r19, Z+7	; 0x07
    1950:	2f 5f       	subi	r18, 0xFF	; 255
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	37 83       	std	Z+7, r19	; 0x07
    1956:	26 83       	std	Z+6, r18	; 0x06
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <fputc+0x6e>
    195a:	8b 01       	movw	r16, r22
    195c:	ec 01       	movw	r28, r24
    195e:	fb 01       	movw	r30, r22
    1960:	00 84       	ldd	r0, Z+8	; 0x08
    1962:	f1 85       	ldd	r31, Z+9	; 0x09
    1964:	e0 2d       	mov	r30, r0
    1966:	09 95       	icall
    1968:	89 2b       	or	r24, r25
    196a:	e1 f6       	brne	.-72     	; 0x1924 <fputc+0x10>
    196c:	d8 01       	movw	r26, r16
    196e:	16 96       	adiw	r26, 0x06	; 6
    1970:	8d 91       	ld	r24, X+
    1972:	9c 91       	ld	r25, X
    1974:	17 97       	sbiw	r26, 0x07	; 7
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	17 96       	adiw	r26, 0x07	; 7
    197a:	9c 93       	st	X, r25
    197c:	8e 93       	st	-X, r24
    197e:	16 97       	sbiw	r26, 0x06	; 6
    1980:	ce 01       	movw	r24, r28
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	08 95       	ret

0000198c <__ultoa_invert>:
    198c:	fa 01       	movw	r30, r20
    198e:	aa 27       	eor	r26, r26
    1990:	28 30       	cpi	r18, 0x08	; 8
    1992:	51 f1       	breq	.+84     	; 0x19e8 <__ultoa_invert+0x5c>
    1994:	20 31       	cpi	r18, 0x10	; 16
    1996:	81 f1       	breq	.+96     	; 0x19f8 <__ultoa_invert+0x6c>
    1998:	e8 94       	clt
    199a:	6f 93       	push	r22
    199c:	6e 7f       	andi	r22, 0xFE	; 254
    199e:	6e 5f       	subi	r22, 0xFE	; 254
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	8f 4f       	sbci	r24, 0xFF	; 255
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	af 4f       	sbci	r26, 0xFF	; 255
    19a8:	b1 e0       	ldi	r27, 0x01	; 1
    19aa:	3e d0       	rcall	.+124    	; 0x1a28 <__ultoa_invert+0x9c>
    19ac:	b4 e0       	ldi	r27, 0x04	; 4
    19ae:	3c d0       	rcall	.+120    	; 0x1a28 <__ultoa_invert+0x9c>
    19b0:	67 0f       	add	r22, r23
    19b2:	78 1f       	adc	r23, r24
    19b4:	89 1f       	adc	r24, r25
    19b6:	9a 1f       	adc	r25, r26
    19b8:	a1 1d       	adc	r26, r1
    19ba:	68 0f       	add	r22, r24
    19bc:	79 1f       	adc	r23, r25
    19be:	8a 1f       	adc	r24, r26
    19c0:	91 1d       	adc	r25, r1
    19c2:	a1 1d       	adc	r26, r1
    19c4:	6a 0f       	add	r22, r26
    19c6:	71 1d       	adc	r23, r1
    19c8:	81 1d       	adc	r24, r1
    19ca:	91 1d       	adc	r25, r1
    19cc:	a1 1d       	adc	r26, r1
    19ce:	20 d0       	rcall	.+64     	; 0x1a10 <__ultoa_invert+0x84>
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <__ultoa_invert+0x48>
    19d2:	68 94       	set
    19d4:	3f 91       	pop	r19
    19d6:	2a e0       	ldi	r18, 0x0A	; 10
    19d8:	26 9f       	mul	r18, r22
    19da:	11 24       	eor	r1, r1
    19dc:	30 19       	sub	r19, r0
    19de:	30 5d       	subi	r19, 0xD0	; 208
    19e0:	31 93       	st	Z+, r19
    19e2:	de f6       	brtc	.-74     	; 0x199a <__ultoa_invert+0xe>
    19e4:	cf 01       	movw	r24, r30
    19e6:	08 95       	ret
    19e8:	46 2f       	mov	r20, r22
    19ea:	47 70       	andi	r20, 0x07	; 7
    19ec:	40 5d       	subi	r20, 0xD0	; 208
    19ee:	41 93       	st	Z+, r20
    19f0:	b3 e0       	ldi	r27, 0x03	; 3
    19f2:	0f d0       	rcall	.+30     	; 0x1a12 <__ultoa_invert+0x86>
    19f4:	c9 f7       	brne	.-14     	; 0x19e8 <__ultoa_invert+0x5c>
    19f6:	f6 cf       	rjmp	.-20     	; 0x19e4 <__ultoa_invert+0x58>
    19f8:	46 2f       	mov	r20, r22
    19fa:	4f 70       	andi	r20, 0x0F	; 15
    19fc:	40 5d       	subi	r20, 0xD0	; 208
    19fe:	4a 33       	cpi	r20, 0x3A	; 58
    1a00:	18 f0       	brcs	.+6      	; 0x1a08 <__ultoa_invert+0x7c>
    1a02:	49 5d       	subi	r20, 0xD9	; 217
    1a04:	31 fd       	sbrc	r19, 1
    1a06:	40 52       	subi	r20, 0x20	; 32
    1a08:	41 93       	st	Z+, r20
    1a0a:	02 d0       	rcall	.+4      	; 0x1a10 <__ultoa_invert+0x84>
    1a0c:	a9 f7       	brne	.-22     	; 0x19f8 <__ultoa_invert+0x6c>
    1a0e:	ea cf       	rjmp	.-44     	; 0x19e4 <__ultoa_invert+0x58>
    1a10:	b4 e0       	ldi	r27, 0x04	; 4
    1a12:	a6 95       	lsr	r26
    1a14:	97 95       	ror	r25
    1a16:	87 95       	ror	r24
    1a18:	77 95       	ror	r23
    1a1a:	67 95       	ror	r22
    1a1c:	ba 95       	dec	r27
    1a1e:	c9 f7       	brne	.-14     	; 0x1a12 <__ultoa_invert+0x86>
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	61 05       	cpc	r22, r1
    1a24:	71 05       	cpc	r23, r1
    1a26:	08 95       	ret
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	0a 2e       	mov	r0, r26
    1a2e:	06 94       	lsr	r0
    1a30:	57 95       	ror	r21
    1a32:	47 95       	ror	r20
    1a34:	37 95       	ror	r19
    1a36:	27 95       	ror	r18
    1a38:	ba 95       	dec	r27
    1a3a:	c9 f7       	brne	.-14     	; 0x1a2e <__ultoa_invert+0xa2>
    1a3c:	62 0f       	add	r22, r18
    1a3e:	73 1f       	adc	r23, r19
    1a40:	84 1f       	adc	r24, r20
    1a42:	95 1f       	adc	r25, r21
    1a44:	a0 1d       	adc	r26, r0
    1a46:	08 95       	ret

00001a48 <__prologue_saves__>:
    1a48:	2f 92       	push	r2
    1a4a:	3f 92       	push	r3
    1a4c:	4f 92       	push	r4
    1a4e:	5f 92       	push	r5
    1a50:	6f 92       	push	r6
    1a52:	7f 92       	push	r7
    1a54:	8f 92       	push	r8
    1a56:	9f 92       	push	r9
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	ca 1b       	sub	r28, r26
    1a72:	db 0b       	sbc	r29, r27
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	09 94       	ijmp

00001a80 <__epilogue_restores__>:
    1a80:	2a 88       	ldd	r2, Y+18	; 0x12
    1a82:	39 88       	ldd	r3, Y+17	; 0x11
    1a84:	48 88       	ldd	r4, Y+16	; 0x10
    1a86:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a88:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a90:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a92:	b9 84       	ldd	r11, Y+9	; 0x09
    1a94:	c8 84       	ldd	r12, Y+8	; 0x08
    1a96:	df 80       	ldd	r13, Y+7	; 0x07
    1a98:	ee 80       	ldd	r14, Y+6	; 0x06
    1a9a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a9c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a9e:	1b 81       	ldd	r17, Y+3	; 0x03
    1aa0:	aa 81       	ldd	r26, Y+2	; 0x02
    1aa2:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa4:	ce 0f       	add	r28, r30
    1aa6:	d1 1d       	adc	r29, r1
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	ed 01       	movw	r28, r26
    1ab4:	08 95       	ret

00001ab6 <_exit>:
    1ab6:	f8 94       	cli

00001ab8 <__stop_program>:
    1ab8:	ff cf       	rjmp	.-2      	; 0x1ab8 <__stop_program>


EE209_Demo_Design_Advanced.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000ab4  00000b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800154  00800154  00000b9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141c  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed1  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000956  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  0000398c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088a  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b4  00000000  00000000  00004422  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000048d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 35       	cpi	r26, 0x54	; 84
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e5       	ldi	r26, 0x54	; 84
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 37       	cpi	r26, 0x72	; 114
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <main>
  ea:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <ADC_initialise>:
#include <avr/io.h>
#include "adc.h"

void ADC_initialise(void)
{
	ADMUX = 0x40;
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0x87;
  f8:	87 e8       	ldi	r24, 0x87	; 135
  fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0x00;
  fe:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 102:	08 95       	ret

00000104 <ADC_convert_channel>:
}

uint16_t ADC_convert_channel(uint8_t channel)
{
	// Set the channel we wish to convert
	ADMUX &= 0xF0;
 104:	ec e7       	ldi	r30, 0x7C	; 124
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	90 83       	st	Z, r25
	ADMUX |= channel;
 10e:	90 81       	ld	r25, Z
 110:	89 2b       	or	r24, r25
 112:	80 83       	st	Z, r24
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 83       	st	Z, r24
	
	// Wait for the conversion to finsih
	while ((ADCSRA & (1 << ADIF)) == 0) {
 11e:	80 81       	ld	r24, Z
 120:	84 ff       	sbrs	r24, 4
 122:	fd cf       	rjmp	.-6      	; 0x11e <ADC_convert_channel+0x1a>
		;
	}
	
	// Read out the ADC counts
	uint16_t adc_count = (ADCL << 0) | (ADCH << 8);
 124:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 128:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	return adc_count;
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	92 2b       	or	r25, r18
 130:	08 95       	ret

00000132 <GPIO_initialise>:
#include "gpio.h"
#include "../configuration.h"

void GPIO_initialise(void) 
{
	BUTTON_OUTPUT_PORT &= ~(1 << BUTTON_PIN);
 132:	27 98       	cbi	0x04, 7	; 4
 134:	08 95       	ret

00000136 <GPIO_button_pressed>:
}

bool GPIO_button_pressed(void)
{
	return !(BUTTON_INPUT_PORT & (1 << BUTTON_PIN)); // Active low
 136:	83 b1       	in	r24, 0x03	; 3
 138:	80 95       	com	r24
 13a:	88 1f       	adc	r24, r24
 13c:	88 27       	eor	r24, r24
 13e:	88 1f       	adc	r24, r24
 140:	08 95       	ret

00000142 <TIMER_initialise>:
#include "timer.h"

// This function initialises the timer with a 1 millisecond range
void TIMER_initialise(void)
{
	TCCR0A = 0x02;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;
 14a:	8a ef       	ldi	r24, 0xFA	; 250
 14c:	87 bd       	out	0x27, r24	; 39
 14e:	08 95       	ret

00000150 <TIMER_wait>:
// This function waits for the timer to overflow. An overflow occurs
// every milliseconds. Each overflow it increments a count variable.
// This is continued until the number of milliseconds requested have
// been passed
void TIMER_wait(uint32_t milliseconds)
{
 150:	ab 01       	movw	r20, r22
 152:	bc 01       	movw	r22, r24
	uint32_t timer_overflows = 0;
	
	TCNT0 = 0;	// Reset the count
 154:	16 bc       	out	0x26, r1	; 38
// every milliseconds. Each overflow it increments a count variable.
// This is continued until the number of milliseconds requested have
// been passed
void TIMER_wait(uint32_t milliseconds)
{
	uint32_t timer_overflows = 0;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	dc 01       	movw	r26, r24
	
	TCNT0 = 0;	// Reset the count
	
	// Loop until the requested milliseconds have elapsed
	while (timer_overflows < milliseconds) {
 15c:	0c c0       	rjmp	.+24     	; 0x176 <TIMER_wait+0x26>
		// Check if the timer has overflowed
		if ((TIFR0 & (1 << OCF0A)) != 0) {
 15e:	a9 99       	sbic	0x15, 1	; 21
 160:	06 c0       	rjmp	.+12     	; 0x16e <TIMER_wait+0x1e>
	uint32_t timer_overflows = 0;
	
	TCNT0 = 0;	// Reset the count
	
	// Loop until the requested milliseconds have elapsed
	while (timer_overflows < milliseconds) {
 162:	84 17       	cp	r24, r20
 164:	95 07       	cpc	r25, r21
 166:	a6 07       	cpc	r26, r22
 168:	b7 07       	cpc	r27, r23
 16a:	c8 f3       	brcs	.-14     	; 0x15e <TIMER_wait+0xe>
 16c:	08 95       	ret
		// Check if the timer has overflowed
		if ((TIFR0 & (1 << OCF0A)) != 0) {
			timer_overflows++;		// Increase the count
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	a1 1d       	adc	r26, r1
 172:	b1 1d       	adc	r27, r1
			TIFR0 |= (1 << OCF0A);	// Reset the overflow flag
 174:	a9 9a       	sbi	0x15, 1	; 21
	uint32_t timer_overflows = 0;
	
	TCNT0 = 0;	// Reset the count
	
	// Loop until the requested milliseconds have elapsed
	while (timer_overflows < milliseconds) {
 176:	48 17       	cp	r20, r24
 178:	59 07       	cpc	r21, r25
 17a:	6a 07       	cpc	r22, r26
 17c:	7b 07       	cpc	r23, r27
 17e:	19 f0       	breq	.+6      	; 0x186 <TIMER_wait+0x36>
		// Check if the timer has overflowed
		if ((TIFR0 & (1 << OCF0A)) != 0) {
 180:	a9 9b       	sbis	0x15, 1	; 21
 182:	ed cf       	rjmp	.-38     	; 0x15e <TIMER_wait+0xe>
 184:	f4 cf       	rjmp	.-24     	; 0x16e <TIMER_wait+0x1e>
 186:	08 95       	ret

00000188 <uart_transmit_byte>:
}

static void uart_transmit_byte(uint8_t byte)
{
	// Wait for the UART data register empty flag
	while ((UCSR0A & 0x20) == 0) {
 188:	e0 ec       	ldi	r30, 0xC0	; 192
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	90 81       	ld	r25, Z
 18e:	95 ff       	sbrs	r25, 5
 190:	fd cf       	rjmp	.-6      	; 0x18c <uart_transmit_byte+0x4>
		;
	}
	
	// Put the byte to be sent into the data register
	UDR0 = byte;
 192:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 196:	08 95       	ret

00000198 <UART_initialise>:

static FILE usart_stdout = FDEV_SETUP_STREAM(uart_transmit_byte, NULL, _FDEV_SETUP_WRITE);

void UART_initialise(uint32_t baud_rate)
{
	UCSR0A = 0x00;
 198:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0x08;
 19c:	28 e0       	ldi	r18, 0x08	; 8
 19e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0x06;
 1a2:	26 e0       	ldi	r18, 0x06	; 6
 1a4:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 16000000 / (16 * baud_rate) - 1;
 1a8:	dc 01       	movw	r26, r24
 1aa:	cb 01       	movw	r24, r22
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	aa 1f       	adc	r26, r26
 1b2:	bb 1f       	adc	r27, r27
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	aa 1f       	adc	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	9c 01       	movw	r18, r24
 1be:	ad 01       	movw	r20, r26
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	44 1f       	adc	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	44 1f       	adc	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	74 e2       	ldi	r23, 0x24	; 36
 1d4:	84 ef       	ldi	r24, 0xF4	; 244
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodsi4>
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	31 09       	sbc	r19, r1
 1e0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1e4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	stdout = &usart_stdout;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <__iob+0x3>
 1f0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__iob+0x2>
 1f4:	08 95       	ret

000001f6 <FSM_initialise>:
struct msd_interface* interface_ptr;

void FSM_initialise(struct msd_interface* interface_in_ptr)
{
	// Store our interface struct
	interface_ptr = interface_in_ptr;
 1f6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <interface_ptr+0x1>
 1fa:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <interface_ptr>
 1fe:	08 95       	ret

00000200 <FSM_tick>:
}

void FSM_tick(void)
{
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
	static enum state current_state = STATE_INITIAL;
	
	static uint16_t adc_readings_millivolts[NUMBER_OF_ADC_SAMPLES];
	static bool sort_ascending;
	
	switch (current_state) {
 20c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <current_state.1833>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	01 f1       	breq	.+64     	; 0x254 <FSM_tick+0x54>
 214:	28 f4       	brcc	.+10     	; 0x220 <FSM_tick+0x20>
 216:	88 23       	and	r24, r24
 218:	49 f0       	breq	.+18     	; 0x22c <FSM_tick+0x2c>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	59 f0       	breq	.+22     	; 0x234 <FSM_tick+0x34>
 21e:	82 c0       	rjmp	.+260    	; 0x324 <FSM_tick+0x124>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	81 f1       	breq	.+96     	; 0x284 <FSM_tick+0x84>
 224:	84 30       	cpi	r24, 0x04	; 4
 226:	09 f4       	brne	.+2      	; 0x22a <FSM_tick+0x2a>
 228:	46 c0       	rjmp	.+140    	; 0x2b6 <FSM_tick+0xb6>
 22a:	7c c0       	rjmp	.+248    	; 0x324 <FSM_tick+0x124>
		case STATE_INITIAL:
			current_state = STATE_WAIT;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <current_state.1833>
			break;
 232:	7a c0       	rjmp	.+244    	; 0x328 <FSM_tick+0x128>
		case STATE_WAIT:
			interface_ptr->wait_func(5000);
 234:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <interface_ptr>
 238:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <interface_ptr+0x1>
 23c:	04 80       	ldd	r0, Z+4	; 0x04
 23e:	f5 81       	ldd	r31, Z+5	; 0x05
 240:	e0 2d       	mov	r30, r0
 242:	68 e8       	ldi	r22, 0x88	; 136
 244:	73 e1       	ldi	r23, 0x13	; 19
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	09 95       	icall
			current_state = STATE_SAMPLE;		
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <current_state.1833>
			break;		
 252:	6a c0       	rjmp	.+212    	; 0x328 <FSM_tick+0x128>
 254:	c5 e5       	ldi	r28, 0x55	; 85
 256:	d1 e0       	ldi	r29, 0x01	; 1
 258:	09 e6       	ldi	r16, 0x69	; 105
 25a:	11 e0       	ldi	r17, 0x01	; 1
		case STATE_SAMPLE:
			for (uint8_t i = 0; i < NUMBER_OF_ADC_SAMPLES; i++) {
				uint16_t adc_result = interface_ptr->convert_channel_func(0);
 25c:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <interface_ptr>
 260:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <interface_ptr+0x1>
 264:	01 90       	ld	r0, Z+
 266:	f0 81       	ld	r31, Z
 268:	e0 2d       	mov	r30, r0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	09 95       	icall
				adc_readings_millivolts[i] = convert_adc_reading_to_millivolts(adc_result);
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	89 93       	st	Y+, r24
 274:	99 93       	st	Y+, r25
		case STATE_WAIT:
			interface_ptr->wait_func(5000);
			current_state = STATE_SAMPLE;		
			break;		
		case STATE_SAMPLE:
			for (uint8_t i = 0; i < NUMBER_OF_ADC_SAMPLES; i++) {
 276:	c0 17       	cp	r28, r16
 278:	d1 07       	cpc	r29, r17
 27a:	81 f7       	brne	.-32     	; 0x25c <FSM_tick+0x5c>
				uint16_t adc_result = interface_ptr->convert_channel_func(0);
				adc_readings_millivolts[i] = convert_adc_reading_to_millivolts(adc_result);
			}
			current_state = STATE_SORT;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <current_state.1833>
			break;
 282:	52 c0       	rjmp	.+164    	; 0x328 <FSM_tick+0x128>
		case STATE_SORT:
			sort_ascending = interface_ptr->button_pressed_func();
 284:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <interface_ptr>
 288:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <interface_ptr+0x1>
 28c:	02 80       	ldd	r0, Z+2	; 0x02
 28e:	f3 81       	ldd	r31, Z+3	; 0x03
 290:	e0 2d       	mov	r30, r0
 292:	09 95       	icall
 294:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
			interface_ptr->array_sort_func(sort_ascending, adc_readings_millivolts, NUMBER_OF_ADC_SAMPLES);
 298:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <interface_ptr>
 29c:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <interface_ptr+0x1>
 2a0:	06 80       	ldd	r0, Z+6	; 0x06
 2a2:	f7 81       	ldd	r31, Z+7	; 0x07
 2a4:	e0 2d       	mov	r30, r0
 2a6:	4a e0       	ldi	r20, 0x0A	; 10
 2a8:	65 e5       	ldi	r22, 0x55	; 85
 2aa:	71 e0       	ldi	r23, 0x01	; 1
 2ac:	09 95       	icall
			current_state = STATE_DISPLAY;
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <current_state.1833>
			break;
 2b4:	39 c0       	rjmp	.+114    	; 0x328 <FSM_tick+0x128>
		case STATE_DISPLAY:
			printf("Values\r\n");
 2b6:	86 e1       	ldi	r24, 0x16	; 22
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 60 02 	call	0x4c0	; 0x4c0 <puts>
			printf("Ascending: %d\r\n", sort_ascending);
 2be:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 2c2:	1f 92       	push	r1
 2c4:	8f 93       	push	r24
 2c6:	8e e1       	ldi	r24, 0x1E	; 30
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	9f 93       	push	r25
 2cc:	8f 93       	push	r24
 2ce:	0e 94 4a 02 	call	0x494	; 0x494 <printf>
 2d2:	05 e5       	ldi	r16, 0x55	; 85
 2d4:	11 e0       	ldi	r17, 0x01	; 1
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
		
			for (uint8_t i = 0; i < NUMBER_OF_ADC_SAMPLES; i++) {
				printf("%u: %u mv\r\n", i, adc_readings_millivolts[i]);
 2e2:	0f 2e       	mov	r0, r31
 2e4:	fe e2       	ldi	r31, 0x2E	; 46
 2e6:	ef 2e       	mov	r14, r31
 2e8:	f1 e0       	ldi	r31, 0x01	; 1
 2ea:	ff 2e       	mov	r15, r31
 2ec:	f0 2d       	mov	r31, r0
 2ee:	f8 01       	movw	r30, r16
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	0e 5f       	subi	r16, 0xFE	; 254
 2f6:	1f 4f       	sbci	r17, 0xFF	; 255
 2f8:	9f 93       	push	r25
 2fa:	8f 93       	push	r24
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	ff 92       	push	r15
 302:	ef 92       	push	r14
 304:	0e 94 4a 02 	call	0x494	; 0x494 <printf>
 308:	21 96       	adiw	r28, 0x01	; 1
			break;
		case STATE_DISPLAY:
			printf("Values\r\n");
			printf("Ascending: %d\r\n", sort_ascending);
		
			for (uint8_t i = 0; i < NUMBER_OF_ADC_SAMPLES; i++) {
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	ca 30       	cpi	r28, 0x0A	; 10
 318:	d1 05       	cpc	r29, r1
 31a:	49 f7       	brne	.-46     	; 0x2ee <FSM_tick+0xee>
				printf("%u: %u mv\r\n", i, adc_readings_millivolts[i]);
			}
			current_state = STATE_WAIT;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <current_state.1833>
			break;
 322:	02 c0       	rjmp	.+4      	; 0x328 <FSM_tick+0x128>
		default:
			current_state = STATE_INITIAL;
 324:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <current_state.1833>
			break;
	}
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	08 95       	ret

00000336 <SORT_array>:
#include <stdint.h>
#include <stdbool.h>
#include "sort.h"

void SORT_array(bool ascending, uint16_t* array, uint8_t length)
{
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
	uint16_t key = 0;
	uint8_t j = 0;
		
	for (uint8_t i = 1; i < length; i++) {
 346:	42 30       	cpi	r20, 0x02	; 2
 348:	c0 f1       	brcs	.+112    	; 0x3ba <SORT_array+0x84>
 34a:	8b 01       	movw	r16, r22
 34c:	0f 2e       	mov	r0, r31
 34e:	fe ef       	ldi	r31, 0xFE	; 254
 350:	ef 2e       	mov	r14, r31
 352:	f0 2d       	mov	r31, r0
 354:	e4 0e       	add	r14, r20
 356:	f1 2c       	mov	r15, r1
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	e9 1a       	sub	r14, r25
 35c:	f9 0a       	sbc	r15, r25
 35e:	c0 e0       	ldi	r28, 0x00	; 0
 360:	d0 e0       	ldi	r29, 0x00	; 0
		key = array[i];
 362:	f8 01       	movw	r30, r16
 364:	a2 81       	ldd	r26, Z+2	; 0x02
 366:	b3 81       	ldd	r27, Z+3	; 0x03
		j = i - 1;
 368:	9c 2f       	mov	r25, r28
		while (j >= 0 && (array[j] > key)) {
 36a:	9e 01       	movw	r18, r28
 36c:	c1 90       	ld	r12, Z+
 36e:	d1 90       	ld	r13, Z+
 370:	8f 01       	movw	r16, r30
 372:	ac 15       	cp	r26, r12
 374:	bd 05       	cpc	r27, r13
 376:	a8 f4       	brcc	.+42     	; 0x3a2 <SORT_array+0x6c>
			array[j + 1] = array[j];
 378:	f9 01       	movw	r30, r18
 37a:	31 96       	adiw	r30, 0x01	; 1
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e6 0f       	add	r30, r22
 382:	f7 1f       	adc	r31, r23
 384:	d1 82       	std	Z+1, r13	; 0x01
 386:	c0 82       	st	Z, r12
			j = j - 1;
 388:	91 50       	subi	r25, 0x01	; 1
	uint8_t j = 0;
		
	for (uint8_t i = 1; i < length; i++) {
		key = array[i];
		j = i - 1;
		while (j >= 0 && (array[j] > key)) {
 38a:	29 2f       	mov	r18, r25
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	f9 01       	movw	r30, r18
 390:	ee 0f       	add	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	e6 0f       	add	r30, r22
 396:	f7 1f       	adc	r31, r23
 398:	c0 80       	ld	r12, Z
 39a:	d1 80       	ldd	r13, Z+1	; 0x01
 39c:	ac 15       	cp	r26, r12
 39e:	bd 05       	cpc	r27, r13
 3a0:	58 f3       	brcs	.-42     	; 0x378 <SORT_array+0x42>
			array[j + 1] = array[j];
			j = j - 1;
		}
		array[j + 1] = key;
 3a2:	f9 01       	movw	r30, r18
 3a4:	31 96       	adiw	r30, 0x01	; 1
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	e6 0f       	add	r30, r22
 3ac:	f7 1f       	adc	r31, r23
 3ae:	b1 83       	std	Z+1, r27	; 0x01
 3b0:	a0 83       	st	Z, r26
 3b2:	21 96       	adiw	r28, 0x01	; 1
void SORT_array(bool ascending, uint16_t* array, uint8_t length)
{
	uint16_t key = 0;
	uint8_t j = 0;
		
	for (uint8_t i = 1; i < length; i++) {
 3b4:	ce 15       	cp	r28, r14
 3b6:	df 05       	cpc	r29, r15
 3b8:	a1 f6       	brne	.-88     	; 0x362 <SORT_array+0x2c>
			j = j - 1;
		}
		array[j + 1] = key;
	}
		
	if (ascending == false) {
 3ba:	81 11       	cpse	r24, r1
 3bc:	16 c0       	rjmp	.+44     	; 0x3ea <SORT_array+0xb4>
		for (uint8_t i = 0; i < length / 2; i++) {
 3be:	94 2f       	mov	r25, r20
 3c0:	96 95       	lsr	r25
 3c2:	99 f0       	breq	.+38     	; 0x3ea <SORT_array+0xb4>
 3c4:	a4 2f       	mov	r26, r20
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	aa 0f       	add	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	a6 0f       	add	r26, r22
 3ce:	b7 1f       	adc	r27, r23
 3d0:	fb 01       	movw	r30, r22
			uint16_t temp = array[length - i - 1];
 3d2:	3e 91       	ld	r19, -X
 3d4:	2e 91       	ld	r18, -X
			array[length - i - 1] = array[i];
 3d6:	40 81       	ld	r20, Z
 3d8:	51 81       	ldd	r21, Z+1	; 0x01
 3da:	11 96       	adiw	r26, 0x01	; 1
 3dc:	5c 93       	st	X, r21
 3de:	4e 93       	st	-X, r20
			array[i] = temp;
 3e0:	21 93       	st	Z+, r18
 3e2:	31 93       	st	Z+, r19
		}
		array[j + 1] = key;
	}
		
	if (ascending == false) {
		for (uint8_t i = 0; i < length / 2; i++) {
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	89 13       	cpse	r24, r25
 3e8:	f4 cf       	rjmp	.-24     	; 0x3d2 <SORT_array+0x9c>
			uint16_t temp = array[length - i - 1];
			array[length - i - 1] = array[i];
			array[i] = temp;
		}
	}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	df 90       	pop	r13
 3f8:	cf 90       	pop	r12
 3fa:	08 95       	ret

000003fc <main>:
#include "fsm_msd/state_machine.h"

#include "configuration.h"

int main(void)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	28 97       	sbiw	r28, 0x08	; 8
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
	ADC_initialise();
 410:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_initialise>
	GPIO_initialise();
 414:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_initialise>
	TIMER_initialise();
 418:	0e 94 a1 00 	call	0x142	; 0x142 <TIMER_initialise>
	UART_initialise(BAUD_RATE);
 41c:	60 e8       	ldi	r22, 0x80	; 128
 41e:	75 e2       	ldi	r23, 0x25	; 37
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 cc 00 	call	0x198	; 0x198 <UART_initialise>
	
	// Create the interface needed by the MSD state machine
	struct msd_interface interface = {
 428:	88 e0       	ldi	r24, 0x08	; 8
 42a:	ee e0       	ldi	r30, 0x0E	; 14
 42c:	f1 e0       	ldi	r31, 0x01	; 1
 42e:	de 01       	movw	r26, r28
 430:	11 96       	adiw	r26, 0x01	; 1
 432:	01 90       	ld	r0, Z+
 434:	0d 92       	st	X+, r0
 436:	8a 95       	dec	r24
 438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		.convert_channel_func = ADC_convert_channel,
		.button_pressed_func = GPIO_button_pressed,
		.array_sort_func = SORT_array,
	};
	
	FSM_initialise(&interface);
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <FSM_initialise>
	
	printf("Initialisation complete\r\n");
 442:	8a e3       	ldi	r24, 0x3A	; 58
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 60 02 	call	0x4c0	; 0x4c0 <puts>
	
    while (1) 
    {
		FSM_tick();		
 44a:	0e 94 00 01 	call	0x200	; 0x200 <FSM_tick>
 44e:	fd cf       	rjmp	.-6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>

00000450 <__udivmodsi4>:
 450:	a1 e2       	ldi	r26, 0x21	; 33
 452:	1a 2e       	mov	r1, r26
 454:	aa 1b       	sub	r26, r26
 456:	bb 1b       	sub	r27, r27
 458:	fd 01       	movw	r30, r26
 45a:	0d c0       	rjmp	.+26     	; 0x476 <__udivmodsi4_ep>

0000045c <__udivmodsi4_loop>:
 45c:	aa 1f       	adc	r26, r26
 45e:	bb 1f       	adc	r27, r27
 460:	ee 1f       	adc	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	a2 17       	cp	r26, r18
 466:	b3 07       	cpc	r27, r19
 468:	e4 07       	cpc	r30, r20
 46a:	f5 07       	cpc	r31, r21
 46c:	20 f0       	brcs	.+8      	; 0x476 <__udivmodsi4_ep>
 46e:	a2 1b       	sub	r26, r18
 470:	b3 0b       	sbc	r27, r19
 472:	e4 0b       	sbc	r30, r20
 474:	f5 0b       	sbc	r31, r21

00000476 <__udivmodsi4_ep>:
 476:	66 1f       	adc	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	1a 94       	dec	r1
 480:	69 f7       	brne	.-38     	; 0x45c <__udivmodsi4_loop>
 482:	60 95       	com	r22
 484:	70 95       	com	r23
 486:	80 95       	com	r24
 488:	90 95       	com	r25
 48a:	9b 01       	movw	r18, r22
 48c:	ac 01       	movw	r20, r24
 48e:	bd 01       	movw	r22, r26
 490:	cf 01       	movw	r24, r30
 492:	08 95       	ret

00000494 <printf>:
 494:	a0 e0       	ldi	r26, 0x00	; 0
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e0 e5       	ldi	r30, 0x50	; 80
 49a:	f2 e0       	ldi	r31, 0x02	; 2
 49c:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__prologue_saves__+0x20>
 4a0:	ae 01       	movw	r20, r28
 4a2:	4b 5f       	subi	r20, 0xFB	; 251
 4a4:	5f 4f       	sbci	r21, 0xFF	; 255
 4a6:	fa 01       	movw	r30, r20
 4a8:	61 91       	ld	r22, Z+
 4aa:	71 91       	ld	r23, Z+
 4ac:	af 01       	movw	r20, r30
 4ae:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__iob+0x2>
 4b2:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <__iob+0x3>
 4b6:	0e 94 90 02 	call	0x520	; 0x520 <vfprintf>
 4ba:	e2 e0       	ldi	r30, 0x02	; 2
 4bc:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__epilogue_restores__+0x20>

000004c0 <puts>:
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <__iob+0x2>
 4cc:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <__iob+0x3>
 4d0:	23 81       	ldd	r18, Z+3	; 0x03
 4d2:	21 ff       	sbrs	r18, 1
 4d4:	1b c0       	rjmp	.+54     	; 0x50c <puts+0x4c>
 4d6:	8c 01       	movw	r16, r24
 4d8:	d0 e0       	ldi	r29, 0x00	; 0
 4da:	c0 e0       	ldi	r28, 0x00	; 0
 4dc:	f8 01       	movw	r30, r16
 4de:	81 91       	ld	r24, Z+
 4e0:	8f 01       	movw	r16, r30
 4e2:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <__iob+0x2>
 4e6:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <__iob+0x3>
 4ea:	db 01       	movw	r26, r22
 4ec:	18 96       	adiw	r26, 0x08	; 8
 4ee:	ed 91       	ld	r30, X+
 4f0:	fc 91       	ld	r31, X
 4f2:	19 97       	sbiw	r26, 0x09	; 9
 4f4:	88 23       	and	r24, r24
 4f6:	31 f0       	breq	.+12     	; 0x504 <puts+0x44>
 4f8:	09 95       	icall
 4fa:	89 2b       	or	r24, r25
 4fc:	79 f3       	breq	.-34     	; 0x4dc <puts+0x1c>
 4fe:	df ef       	ldi	r29, 0xFF	; 255
 500:	cf ef       	ldi	r28, 0xFF	; 255
 502:	ec cf       	rjmp	.-40     	; 0x4dc <puts+0x1c>
 504:	8a e0       	ldi	r24, 0x0A	; 10
 506:	09 95       	icall
 508:	89 2b       	or	r24, r25
 50a:	19 f0       	breq	.+6      	; 0x512 <puts+0x52>
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	9f ef       	ldi	r25, 0xFF	; 255
 510:	02 c0       	rjmp	.+4      	; 0x516 <puts+0x56>
 512:	8d 2f       	mov	r24, r29
 514:	9c 2f       	mov	r25, r28
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <vfprintf>:
 520:	ab e0       	ldi	r26, 0x0B	; 11
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	e6 e9       	ldi	r30, 0x96	; 150
 526:	f2 e0       	ldi	r31, 0x02	; 2
 528:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__prologue_saves__>
 52c:	6c 01       	movw	r12, r24
 52e:	7b 01       	movw	r14, r22
 530:	8a 01       	movw	r16, r20
 532:	fc 01       	movw	r30, r24
 534:	17 82       	std	Z+7, r1	; 0x07
 536:	16 82       	std	Z+6, r1	; 0x06
 538:	83 81       	ldd	r24, Z+3	; 0x03
 53a:	81 ff       	sbrs	r24, 1
 53c:	cc c1       	rjmp	.+920    	; 0x8d6 <vfprintf+0x3b6>
 53e:	ce 01       	movw	r24, r28
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	3c 01       	movw	r6, r24
 544:	f6 01       	movw	r30, r12
 546:	93 81       	ldd	r25, Z+3	; 0x03
 548:	f7 01       	movw	r30, r14
 54a:	93 fd       	sbrc	r25, 3
 54c:	85 91       	lpm	r24, Z+
 54e:	93 ff       	sbrs	r25, 3
 550:	81 91       	ld	r24, Z+
 552:	7f 01       	movw	r14, r30
 554:	88 23       	and	r24, r24
 556:	09 f4       	brne	.+2      	; 0x55a <vfprintf+0x3a>
 558:	ba c1       	rjmp	.+884    	; 0x8ce <vfprintf+0x3ae>
 55a:	85 32       	cpi	r24, 0x25	; 37
 55c:	39 f4       	brne	.+14     	; 0x56c <vfprintf+0x4c>
 55e:	93 fd       	sbrc	r25, 3
 560:	85 91       	lpm	r24, Z+
 562:	93 ff       	sbrs	r25, 3
 564:	81 91       	ld	r24, Z+
 566:	7f 01       	movw	r14, r30
 568:	85 32       	cpi	r24, 0x25	; 37
 56a:	29 f4       	brne	.+10     	; 0x576 <vfprintf+0x56>
 56c:	b6 01       	movw	r22, r12
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 574:	e7 cf       	rjmp	.-50     	; 0x544 <vfprintf+0x24>
 576:	91 2c       	mov	r9, r1
 578:	21 2c       	mov	r2, r1
 57a:	31 2c       	mov	r3, r1
 57c:	ff e1       	ldi	r31, 0x1F	; 31
 57e:	f3 15       	cp	r31, r3
 580:	d8 f0       	brcs	.+54     	; 0x5b8 <vfprintf+0x98>
 582:	8b 32       	cpi	r24, 0x2B	; 43
 584:	79 f0       	breq	.+30     	; 0x5a4 <vfprintf+0x84>
 586:	38 f4       	brcc	.+14     	; 0x596 <vfprintf+0x76>
 588:	80 32       	cpi	r24, 0x20	; 32
 58a:	79 f0       	breq	.+30     	; 0x5aa <vfprintf+0x8a>
 58c:	83 32       	cpi	r24, 0x23	; 35
 58e:	a1 f4       	brne	.+40     	; 0x5b8 <vfprintf+0x98>
 590:	23 2d       	mov	r18, r3
 592:	20 61       	ori	r18, 0x10	; 16
 594:	1d c0       	rjmp	.+58     	; 0x5d0 <vfprintf+0xb0>
 596:	8d 32       	cpi	r24, 0x2D	; 45
 598:	61 f0       	breq	.+24     	; 0x5b2 <vfprintf+0x92>
 59a:	80 33       	cpi	r24, 0x30	; 48
 59c:	69 f4       	brne	.+26     	; 0x5b8 <vfprintf+0x98>
 59e:	23 2d       	mov	r18, r3
 5a0:	21 60       	ori	r18, 0x01	; 1
 5a2:	16 c0       	rjmp	.+44     	; 0x5d0 <vfprintf+0xb0>
 5a4:	83 2d       	mov	r24, r3
 5a6:	82 60       	ori	r24, 0x02	; 2
 5a8:	38 2e       	mov	r3, r24
 5aa:	e3 2d       	mov	r30, r3
 5ac:	e4 60       	ori	r30, 0x04	; 4
 5ae:	3e 2e       	mov	r3, r30
 5b0:	2a c0       	rjmp	.+84     	; 0x606 <vfprintf+0xe6>
 5b2:	f3 2d       	mov	r31, r3
 5b4:	f8 60       	ori	r31, 0x08	; 8
 5b6:	1d c0       	rjmp	.+58     	; 0x5f2 <vfprintf+0xd2>
 5b8:	37 fc       	sbrc	r3, 7
 5ba:	2d c0       	rjmp	.+90     	; 0x616 <vfprintf+0xf6>
 5bc:	20 ed       	ldi	r18, 0xD0	; 208
 5be:	28 0f       	add	r18, r24
 5c0:	2a 30       	cpi	r18, 0x0A	; 10
 5c2:	40 f0       	brcs	.+16     	; 0x5d4 <vfprintf+0xb4>
 5c4:	8e 32       	cpi	r24, 0x2E	; 46
 5c6:	b9 f4       	brne	.+46     	; 0x5f6 <vfprintf+0xd6>
 5c8:	36 fc       	sbrc	r3, 6
 5ca:	81 c1       	rjmp	.+770    	; 0x8ce <vfprintf+0x3ae>
 5cc:	23 2d       	mov	r18, r3
 5ce:	20 64       	ori	r18, 0x40	; 64
 5d0:	32 2e       	mov	r3, r18
 5d2:	19 c0       	rjmp	.+50     	; 0x606 <vfprintf+0xe6>
 5d4:	36 fe       	sbrs	r3, 6
 5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <vfprintf+0xc4>
 5d8:	8a e0       	ldi	r24, 0x0A	; 10
 5da:	98 9e       	mul	r9, r24
 5dc:	20 0d       	add	r18, r0
 5de:	11 24       	eor	r1, r1
 5e0:	92 2e       	mov	r9, r18
 5e2:	11 c0       	rjmp	.+34     	; 0x606 <vfprintf+0xe6>
 5e4:	ea e0       	ldi	r30, 0x0A	; 10
 5e6:	2e 9e       	mul	r2, r30
 5e8:	20 0d       	add	r18, r0
 5ea:	11 24       	eor	r1, r1
 5ec:	22 2e       	mov	r2, r18
 5ee:	f3 2d       	mov	r31, r3
 5f0:	f0 62       	ori	r31, 0x20	; 32
 5f2:	3f 2e       	mov	r3, r31
 5f4:	08 c0       	rjmp	.+16     	; 0x606 <vfprintf+0xe6>
 5f6:	8c 36       	cpi	r24, 0x6C	; 108
 5f8:	21 f4       	brne	.+8      	; 0x602 <vfprintf+0xe2>
 5fa:	83 2d       	mov	r24, r3
 5fc:	80 68       	ori	r24, 0x80	; 128
 5fe:	38 2e       	mov	r3, r24
 600:	02 c0       	rjmp	.+4      	; 0x606 <vfprintf+0xe6>
 602:	88 36       	cpi	r24, 0x68	; 104
 604:	41 f4       	brne	.+16     	; 0x616 <vfprintf+0xf6>
 606:	f7 01       	movw	r30, r14
 608:	93 fd       	sbrc	r25, 3
 60a:	85 91       	lpm	r24, Z+
 60c:	93 ff       	sbrs	r25, 3
 60e:	81 91       	ld	r24, Z+
 610:	7f 01       	movw	r14, r30
 612:	81 11       	cpse	r24, r1
 614:	b3 cf       	rjmp	.-154    	; 0x57c <vfprintf+0x5c>
 616:	98 2f       	mov	r25, r24
 618:	9f 7d       	andi	r25, 0xDF	; 223
 61a:	95 54       	subi	r25, 0x45	; 69
 61c:	93 30       	cpi	r25, 0x03	; 3
 61e:	28 f4       	brcc	.+10     	; 0x62a <vfprintf+0x10a>
 620:	0c 5f       	subi	r16, 0xFC	; 252
 622:	1f 4f       	sbci	r17, 0xFF	; 255
 624:	9f e3       	ldi	r25, 0x3F	; 63
 626:	99 83       	std	Y+1, r25	; 0x01
 628:	0d c0       	rjmp	.+26     	; 0x644 <vfprintf+0x124>
 62a:	83 36       	cpi	r24, 0x63	; 99
 62c:	31 f0       	breq	.+12     	; 0x63a <vfprintf+0x11a>
 62e:	83 37       	cpi	r24, 0x73	; 115
 630:	71 f0       	breq	.+28     	; 0x64e <vfprintf+0x12e>
 632:	83 35       	cpi	r24, 0x53	; 83
 634:	09 f0       	breq	.+2      	; 0x638 <vfprintf+0x118>
 636:	59 c0       	rjmp	.+178    	; 0x6ea <vfprintf+0x1ca>
 638:	21 c0       	rjmp	.+66     	; 0x67c <vfprintf+0x15c>
 63a:	f8 01       	movw	r30, r16
 63c:	80 81       	ld	r24, Z
 63e:	89 83       	std	Y+1, r24	; 0x01
 640:	0e 5f       	subi	r16, 0xFE	; 254
 642:	1f 4f       	sbci	r17, 0xFF	; 255
 644:	88 24       	eor	r8, r8
 646:	83 94       	inc	r8
 648:	91 2c       	mov	r9, r1
 64a:	53 01       	movw	r10, r6
 64c:	13 c0       	rjmp	.+38     	; 0x674 <vfprintf+0x154>
 64e:	28 01       	movw	r4, r16
 650:	f2 e0       	ldi	r31, 0x02	; 2
 652:	4f 0e       	add	r4, r31
 654:	51 1c       	adc	r5, r1
 656:	f8 01       	movw	r30, r16
 658:	a0 80       	ld	r10, Z
 65a:	b1 80       	ldd	r11, Z+1	; 0x01
 65c:	36 fe       	sbrs	r3, 6
 65e:	03 c0       	rjmp	.+6      	; 0x666 <vfprintf+0x146>
 660:	69 2d       	mov	r22, r9
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <vfprintf+0x14a>
 666:	6f ef       	ldi	r22, 0xFF	; 255
 668:	7f ef       	ldi	r23, 0xFF	; 255
 66a:	c5 01       	movw	r24, r10
 66c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <strnlen>
 670:	4c 01       	movw	r8, r24
 672:	82 01       	movw	r16, r4
 674:	f3 2d       	mov	r31, r3
 676:	ff 77       	andi	r31, 0x7F	; 127
 678:	3f 2e       	mov	r3, r31
 67a:	16 c0       	rjmp	.+44     	; 0x6a8 <vfprintf+0x188>
 67c:	28 01       	movw	r4, r16
 67e:	22 e0       	ldi	r18, 0x02	; 2
 680:	42 0e       	add	r4, r18
 682:	51 1c       	adc	r5, r1
 684:	f8 01       	movw	r30, r16
 686:	a0 80       	ld	r10, Z
 688:	b1 80       	ldd	r11, Z+1	; 0x01
 68a:	36 fe       	sbrs	r3, 6
 68c:	03 c0       	rjmp	.+6      	; 0x694 <vfprintf+0x174>
 68e:	69 2d       	mov	r22, r9
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <vfprintf+0x178>
 694:	6f ef       	ldi	r22, 0xFF	; 255
 696:	7f ef       	ldi	r23, 0xFF	; 255
 698:	c5 01       	movw	r24, r10
 69a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <strnlen_P>
 69e:	4c 01       	movw	r8, r24
 6a0:	f3 2d       	mov	r31, r3
 6a2:	f0 68       	ori	r31, 0x80	; 128
 6a4:	3f 2e       	mov	r3, r31
 6a6:	82 01       	movw	r16, r4
 6a8:	33 fc       	sbrc	r3, 3
 6aa:	1b c0       	rjmp	.+54     	; 0x6e2 <vfprintf+0x1c2>
 6ac:	82 2d       	mov	r24, r2
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	88 16       	cp	r8, r24
 6b2:	99 06       	cpc	r9, r25
 6b4:	b0 f4       	brcc	.+44     	; 0x6e2 <vfprintf+0x1c2>
 6b6:	b6 01       	movw	r22, r12
 6b8:	80 e2       	ldi	r24, 0x20	; 32
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 6c0:	2a 94       	dec	r2
 6c2:	f4 cf       	rjmp	.-24     	; 0x6ac <vfprintf+0x18c>
 6c4:	f5 01       	movw	r30, r10
 6c6:	37 fc       	sbrc	r3, 7
 6c8:	85 91       	lpm	r24, Z+
 6ca:	37 fe       	sbrs	r3, 7
 6cc:	81 91       	ld	r24, Z+
 6ce:	5f 01       	movw	r10, r30
 6d0:	b6 01       	movw	r22, r12
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 6d8:	21 10       	cpse	r2, r1
 6da:	2a 94       	dec	r2
 6dc:	21 e0       	ldi	r18, 0x01	; 1
 6de:	82 1a       	sub	r8, r18
 6e0:	91 08       	sbc	r9, r1
 6e2:	81 14       	cp	r8, r1
 6e4:	91 04       	cpc	r9, r1
 6e6:	71 f7       	brne	.-36     	; 0x6c4 <vfprintf+0x1a4>
 6e8:	e8 c0       	rjmp	.+464    	; 0x8ba <vfprintf+0x39a>
 6ea:	84 36       	cpi	r24, 0x64	; 100
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <vfprintf+0x1d2>
 6ee:	89 36       	cpi	r24, 0x69	; 105
 6f0:	41 f5       	brne	.+80     	; 0x742 <vfprintf+0x222>
 6f2:	f8 01       	movw	r30, r16
 6f4:	37 fe       	sbrs	r3, 7
 6f6:	07 c0       	rjmp	.+14     	; 0x706 <vfprintf+0x1e6>
 6f8:	60 81       	ld	r22, Z
 6fa:	71 81       	ldd	r23, Z+1	; 0x01
 6fc:	82 81       	ldd	r24, Z+2	; 0x02
 6fe:	93 81       	ldd	r25, Z+3	; 0x03
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	08 c0       	rjmp	.+16     	; 0x716 <vfprintf+0x1f6>
 706:	60 81       	ld	r22, Z
 708:	71 81       	ldd	r23, Z+1	; 0x01
 70a:	07 2e       	mov	r0, r23
 70c:	00 0c       	add	r0, r0
 70e:	88 0b       	sbc	r24, r24
 710:	99 0b       	sbc	r25, r25
 712:	0e 5f       	subi	r16, 0xFE	; 254
 714:	1f 4f       	sbci	r17, 0xFF	; 255
 716:	f3 2d       	mov	r31, r3
 718:	ff 76       	andi	r31, 0x6F	; 111
 71a:	3f 2e       	mov	r3, r31
 71c:	97 ff       	sbrs	r25, 7
 71e:	09 c0       	rjmp	.+18     	; 0x732 <vfprintf+0x212>
 720:	90 95       	com	r25
 722:	80 95       	com	r24
 724:	70 95       	com	r23
 726:	61 95       	neg	r22
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	8f 4f       	sbci	r24, 0xFF	; 255
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	f0 68       	ori	r31, 0x80	; 128
 730:	3f 2e       	mov	r3, r31
 732:	2a e0       	ldi	r18, 0x0A	; 10
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	a3 01       	movw	r20, r6
 738:	0e 94 c3 04 	call	0x986	; 0x986 <__ultoa_invert>
 73c:	88 2e       	mov	r8, r24
 73e:	86 18       	sub	r8, r6
 740:	45 c0       	rjmp	.+138    	; 0x7cc <vfprintf+0x2ac>
 742:	85 37       	cpi	r24, 0x75	; 117
 744:	31 f4       	brne	.+12     	; 0x752 <vfprintf+0x232>
 746:	23 2d       	mov	r18, r3
 748:	2f 7e       	andi	r18, 0xEF	; 239
 74a:	b2 2e       	mov	r11, r18
 74c:	2a e0       	ldi	r18, 0x0A	; 10
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	25 c0       	rjmp	.+74     	; 0x79c <vfprintf+0x27c>
 752:	93 2d       	mov	r25, r3
 754:	99 7f       	andi	r25, 0xF9	; 249
 756:	b9 2e       	mov	r11, r25
 758:	8f 36       	cpi	r24, 0x6F	; 111
 75a:	c1 f0       	breq	.+48     	; 0x78c <vfprintf+0x26c>
 75c:	18 f4       	brcc	.+6      	; 0x764 <vfprintf+0x244>
 75e:	88 35       	cpi	r24, 0x58	; 88
 760:	79 f0       	breq	.+30     	; 0x780 <vfprintf+0x260>
 762:	b5 c0       	rjmp	.+362    	; 0x8ce <vfprintf+0x3ae>
 764:	80 37       	cpi	r24, 0x70	; 112
 766:	19 f0       	breq	.+6      	; 0x76e <vfprintf+0x24e>
 768:	88 37       	cpi	r24, 0x78	; 120
 76a:	21 f0       	breq	.+8      	; 0x774 <vfprintf+0x254>
 76c:	b0 c0       	rjmp	.+352    	; 0x8ce <vfprintf+0x3ae>
 76e:	e9 2f       	mov	r30, r25
 770:	e0 61       	ori	r30, 0x10	; 16
 772:	be 2e       	mov	r11, r30
 774:	b4 fe       	sbrs	r11, 4
 776:	0d c0       	rjmp	.+26     	; 0x792 <vfprintf+0x272>
 778:	fb 2d       	mov	r31, r11
 77a:	f4 60       	ori	r31, 0x04	; 4
 77c:	bf 2e       	mov	r11, r31
 77e:	09 c0       	rjmp	.+18     	; 0x792 <vfprintf+0x272>
 780:	34 fe       	sbrs	r3, 4
 782:	0a c0       	rjmp	.+20     	; 0x798 <vfprintf+0x278>
 784:	29 2f       	mov	r18, r25
 786:	26 60       	ori	r18, 0x06	; 6
 788:	b2 2e       	mov	r11, r18
 78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0x278>
 78c:	28 e0       	ldi	r18, 0x08	; 8
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	05 c0       	rjmp	.+10     	; 0x79c <vfprintf+0x27c>
 792:	20 e1       	ldi	r18, 0x10	; 16
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x27c>
 798:	20 e1       	ldi	r18, 0x10	; 16
 79a:	32 e0       	ldi	r19, 0x02	; 2
 79c:	f8 01       	movw	r30, r16
 79e:	b7 fe       	sbrs	r11, 7
 7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <vfprintf+0x290>
 7a2:	60 81       	ld	r22, Z
 7a4:	71 81       	ldd	r23, Z+1	; 0x01
 7a6:	82 81       	ldd	r24, Z+2	; 0x02
 7a8:	93 81       	ldd	r25, Z+3	; 0x03
 7aa:	0c 5f       	subi	r16, 0xFC	; 252
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <vfprintf+0x29c>
 7b0:	60 81       	ld	r22, Z
 7b2:	71 81       	ldd	r23, Z+1	; 0x01
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 5f       	subi	r16, 0xFE	; 254
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	a3 01       	movw	r20, r6
 7be:	0e 94 c3 04 	call	0x986	; 0x986 <__ultoa_invert>
 7c2:	88 2e       	mov	r8, r24
 7c4:	86 18       	sub	r8, r6
 7c6:	fb 2d       	mov	r31, r11
 7c8:	ff 77       	andi	r31, 0x7F	; 127
 7ca:	3f 2e       	mov	r3, r31
 7cc:	36 fe       	sbrs	r3, 6
 7ce:	0d c0       	rjmp	.+26     	; 0x7ea <vfprintf+0x2ca>
 7d0:	23 2d       	mov	r18, r3
 7d2:	2e 7f       	andi	r18, 0xFE	; 254
 7d4:	a2 2e       	mov	r10, r18
 7d6:	89 14       	cp	r8, r9
 7d8:	58 f4       	brcc	.+22     	; 0x7f0 <vfprintf+0x2d0>
 7da:	34 fe       	sbrs	r3, 4
 7dc:	0b c0       	rjmp	.+22     	; 0x7f4 <vfprintf+0x2d4>
 7de:	32 fc       	sbrc	r3, 2
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <vfprintf+0x2d4>
 7e2:	83 2d       	mov	r24, r3
 7e4:	8e 7e       	andi	r24, 0xEE	; 238
 7e6:	a8 2e       	mov	r10, r24
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <vfprintf+0x2d4>
 7ea:	b8 2c       	mov	r11, r8
 7ec:	a3 2c       	mov	r10, r3
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <vfprintf+0x2d6>
 7f0:	b8 2c       	mov	r11, r8
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <vfprintf+0x2d6>
 7f4:	b9 2c       	mov	r11, r9
 7f6:	a4 fe       	sbrs	r10, 4
 7f8:	0f c0       	rjmp	.+30     	; 0x818 <vfprintf+0x2f8>
 7fa:	fe 01       	movw	r30, r28
 7fc:	e8 0d       	add	r30, r8
 7fe:	f1 1d       	adc	r31, r1
 800:	80 81       	ld	r24, Z
 802:	80 33       	cpi	r24, 0x30	; 48
 804:	21 f4       	brne	.+8      	; 0x80e <vfprintf+0x2ee>
 806:	9a 2d       	mov	r25, r10
 808:	99 7e       	andi	r25, 0xE9	; 233
 80a:	a9 2e       	mov	r10, r25
 80c:	09 c0       	rjmp	.+18     	; 0x820 <vfprintf+0x300>
 80e:	a2 fe       	sbrs	r10, 2
 810:	06 c0       	rjmp	.+12     	; 0x81e <vfprintf+0x2fe>
 812:	b3 94       	inc	r11
 814:	b3 94       	inc	r11
 816:	04 c0       	rjmp	.+8      	; 0x820 <vfprintf+0x300>
 818:	8a 2d       	mov	r24, r10
 81a:	86 78       	andi	r24, 0x86	; 134
 81c:	09 f0       	breq	.+2      	; 0x820 <vfprintf+0x300>
 81e:	b3 94       	inc	r11
 820:	a3 fc       	sbrc	r10, 3
 822:	11 c0       	rjmp	.+34     	; 0x846 <vfprintf+0x326>
 824:	a0 fe       	sbrs	r10, 0
 826:	06 c0       	rjmp	.+12     	; 0x834 <vfprintf+0x314>
 828:	b2 14       	cp	r11, r2
 82a:	88 f4       	brcc	.+34     	; 0x84e <vfprintf+0x32e>
 82c:	28 0c       	add	r2, r8
 82e:	92 2c       	mov	r9, r2
 830:	9b 18       	sub	r9, r11
 832:	0e c0       	rjmp	.+28     	; 0x850 <vfprintf+0x330>
 834:	b2 14       	cp	r11, r2
 836:	60 f4       	brcc	.+24     	; 0x850 <vfprintf+0x330>
 838:	b6 01       	movw	r22, r12
 83a:	80 e2       	ldi	r24, 0x20	; 32
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 842:	b3 94       	inc	r11
 844:	f7 cf       	rjmp	.-18     	; 0x834 <vfprintf+0x314>
 846:	b2 14       	cp	r11, r2
 848:	18 f4       	brcc	.+6      	; 0x850 <vfprintf+0x330>
 84a:	2b 18       	sub	r2, r11
 84c:	02 c0       	rjmp	.+4      	; 0x852 <vfprintf+0x332>
 84e:	98 2c       	mov	r9, r8
 850:	21 2c       	mov	r2, r1
 852:	a4 fe       	sbrs	r10, 4
 854:	10 c0       	rjmp	.+32     	; 0x876 <vfprintf+0x356>
 856:	b6 01       	movw	r22, r12
 858:	80 e3       	ldi	r24, 0x30	; 48
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 860:	a2 fe       	sbrs	r10, 2
 862:	17 c0       	rjmp	.+46     	; 0x892 <vfprintf+0x372>
 864:	a1 fc       	sbrc	r10, 1
 866:	03 c0       	rjmp	.+6      	; 0x86e <vfprintf+0x34e>
 868:	88 e7       	ldi	r24, 0x78	; 120
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <vfprintf+0x352>
 86e:	88 e5       	ldi	r24, 0x58	; 88
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	b6 01       	movw	r22, r12
 874:	0c c0       	rjmp	.+24     	; 0x88e <vfprintf+0x36e>
 876:	8a 2d       	mov	r24, r10
 878:	86 78       	andi	r24, 0x86	; 134
 87a:	59 f0       	breq	.+22     	; 0x892 <vfprintf+0x372>
 87c:	a1 fe       	sbrs	r10, 1
 87e:	02 c0       	rjmp	.+4      	; 0x884 <vfprintf+0x364>
 880:	8b e2       	ldi	r24, 0x2B	; 43
 882:	01 c0       	rjmp	.+2      	; 0x886 <vfprintf+0x366>
 884:	80 e2       	ldi	r24, 0x20	; 32
 886:	a7 fc       	sbrc	r10, 7
 888:	8d e2       	ldi	r24, 0x2D	; 45
 88a:	b6 01       	movw	r22, r12
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 892:	89 14       	cp	r8, r9
 894:	38 f4       	brcc	.+14     	; 0x8a4 <vfprintf+0x384>
 896:	b6 01       	movw	r22, r12
 898:	80 e3       	ldi	r24, 0x30	; 48
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 8a0:	9a 94       	dec	r9
 8a2:	f7 cf       	rjmp	.-18     	; 0x892 <vfprintf+0x372>
 8a4:	8a 94       	dec	r8
 8a6:	f3 01       	movw	r30, r6
 8a8:	e8 0d       	add	r30, r8
 8aa:	f1 1d       	adc	r31, r1
 8ac:	80 81       	ld	r24, Z
 8ae:	b6 01       	movw	r22, r12
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 8b6:	81 10       	cpse	r8, r1
 8b8:	f5 cf       	rjmp	.-22     	; 0x8a4 <vfprintf+0x384>
 8ba:	22 20       	and	r2, r2
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <vfprintf+0x3a0>
 8be:	42 ce       	rjmp	.-892    	; 0x544 <vfprintf+0x24>
 8c0:	b6 01       	movw	r22, r12
 8c2:	80 e2       	ldi	r24, 0x20	; 32
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 87 04 	call	0x90e	; 0x90e <fputc>
 8ca:	2a 94       	dec	r2
 8cc:	f6 cf       	rjmp	.-20     	; 0x8ba <vfprintf+0x39a>
 8ce:	f6 01       	movw	r30, r12
 8d0:	86 81       	ldd	r24, Z+6	; 0x06
 8d2:	97 81       	ldd	r25, Z+7	; 0x07
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x3ba>
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	9f ef       	ldi	r25, 0xFF	; 255
 8da:	2b 96       	adiw	r28, 0x0b	; 11
 8dc:	e2 e1       	ldi	r30, 0x12	; 18
 8de:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__epilogue_restores__>

000008e2 <strnlen_P>:
 8e2:	fc 01       	movw	r30, r24
 8e4:	05 90       	lpm	r0, Z+
 8e6:	61 50       	subi	r22, 0x01	; 1
 8e8:	70 40       	sbci	r23, 0x00	; 0
 8ea:	01 10       	cpse	r0, r1
 8ec:	d8 f7       	brcc	.-10     	; 0x8e4 <strnlen_P+0x2>
 8ee:	80 95       	com	r24
 8f0:	90 95       	com	r25
 8f2:	8e 0f       	add	r24, r30
 8f4:	9f 1f       	adc	r25, r31
 8f6:	08 95       	ret

000008f8 <strnlen>:
 8f8:	fc 01       	movw	r30, r24
 8fa:	61 50       	subi	r22, 0x01	; 1
 8fc:	70 40       	sbci	r23, 0x00	; 0
 8fe:	01 90       	ld	r0, Z+
 900:	01 10       	cpse	r0, r1
 902:	d8 f7       	brcc	.-10     	; 0x8fa <strnlen+0x2>
 904:	80 95       	com	r24
 906:	90 95       	com	r25
 908:	8e 0f       	add	r24, r30
 90a:	9f 1f       	adc	r25, r31
 90c:	08 95       	ret

0000090e <fputc>:
 90e:	0f 93       	push	r16
 910:	1f 93       	push	r17
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	fb 01       	movw	r30, r22
 918:	23 81       	ldd	r18, Z+3	; 0x03
 91a:	21 fd       	sbrc	r18, 1
 91c:	03 c0       	rjmp	.+6      	; 0x924 <fputc+0x16>
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	9f ef       	ldi	r25, 0xFF	; 255
 922:	2c c0       	rjmp	.+88     	; 0x97c <fputc+0x6e>
 924:	22 ff       	sbrs	r18, 2
 926:	16 c0       	rjmp	.+44     	; 0x954 <fputc+0x46>
 928:	46 81       	ldd	r20, Z+6	; 0x06
 92a:	57 81       	ldd	r21, Z+7	; 0x07
 92c:	24 81       	ldd	r18, Z+4	; 0x04
 92e:	35 81       	ldd	r19, Z+5	; 0x05
 930:	42 17       	cp	r20, r18
 932:	53 07       	cpc	r21, r19
 934:	44 f4       	brge	.+16     	; 0x946 <fputc+0x38>
 936:	a0 81       	ld	r26, Z
 938:	b1 81       	ldd	r27, Z+1	; 0x01
 93a:	9d 01       	movw	r18, r26
 93c:	2f 5f       	subi	r18, 0xFF	; 255
 93e:	3f 4f       	sbci	r19, 0xFF	; 255
 940:	31 83       	std	Z+1, r19	; 0x01
 942:	20 83       	st	Z, r18
 944:	8c 93       	st	X, r24
 946:	26 81       	ldd	r18, Z+6	; 0x06
 948:	37 81       	ldd	r19, Z+7	; 0x07
 94a:	2f 5f       	subi	r18, 0xFF	; 255
 94c:	3f 4f       	sbci	r19, 0xFF	; 255
 94e:	37 83       	std	Z+7, r19	; 0x07
 950:	26 83       	std	Z+6, r18	; 0x06
 952:	14 c0       	rjmp	.+40     	; 0x97c <fputc+0x6e>
 954:	8b 01       	movw	r16, r22
 956:	ec 01       	movw	r28, r24
 958:	fb 01       	movw	r30, r22
 95a:	00 84       	ldd	r0, Z+8	; 0x08
 95c:	f1 85       	ldd	r31, Z+9	; 0x09
 95e:	e0 2d       	mov	r30, r0
 960:	09 95       	icall
 962:	89 2b       	or	r24, r25
 964:	e1 f6       	brne	.-72     	; 0x91e <fputc+0x10>
 966:	d8 01       	movw	r26, r16
 968:	16 96       	adiw	r26, 0x06	; 6
 96a:	8d 91       	ld	r24, X+
 96c:	9c 91       	ld	r25, X
 96e:	17 97       	sbiw	r26, 0x07	; 7
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	17 96       	adiw	r26, 0x07	; 7
 974:	9c 93       	st	X, r25
 976:	8e 93       	st	-X, r24
 978:	16 97       	sbiw	r26, 0x06	; 6
 97a:	ce 01       	movw	r24, r28
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	1f 91       	pop	r17
 982:	0f 91       	pop	r16
 984:	08 95       	ret

00000986 <__ultoa_invert>:
 986:	fa 01       	movw	r30, r20
 988:	aa 27       	eor	r26, r26
 98a:	28 30       	cpi	r18, 0x08	; 8
 98c:	51 f1       	breq	.+84     	; 0x9e2 <__ultoa_invert+0x5c>
 98e:	20 31       	cpi	r18, 0x10	; 16
 990:	81 f1       	breq	.+96     	; 0x9f2 <__ultoa_invert+0x6c>
 992:	e8 94       	clt
 994:	6f 93       	push	r22
 996:	6e 7f       	andi	r22, 0xFE	; 254
 998:	6e 5f       	subi	r22, 0xFE	; 254
 99a:	7f 4f       	sbci	r23, 0xFF	; 255
 99c:	8f 4f       	sbci	r24, 0xFF	; 255
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	af 4f       	sbci	r26, 0xFF	; 255
 9a2:	b1 e0       	ldi	r27, 0x01	; 1
 9a4:	3e d0       	rcall	.+124    	; 0xa22 <__ultoa_invert+0x9c>
 9a6:	b4 e0       	ldi	r27, 0x04	; 4
 9a8:	3c d0       	rcall	.+120    	; 0xa22 <__ultoa_invert+0x9c>
 9aa:	67 0f       	add	r22, r23
 9ac:	78 1f       	adc	r23, r24
 9ae:	89 1f       	adc	r24, r25
 9b0:	9a 1f       	adc	r25, r26
 9b2:	a1 1d       	adc	r26, r1
 9b4:	68 0f       	add	r22, r24
 9b6:	79 1f       	adc	r23, r25
 9b8:	8a 1f       	adc	r24, r26
 9ba:	91 1d       	adc	r25, r1
 9bc:	a1 1d       	adc	r26, r1
 9be:	6a 0f       	add	r22, r26
 9c0:	71 1d       	adc	r23, r1
 9c2:	81 1d       	adc	r24, r1
 9c4:	91 1d       	adc	r25, r1
 9c6:	a1 1d       	adc	r26, r1
 9c8:	20 d0       	rcall	.+64     	; 0xa0a <__ultoa_invert+0x84>
 9ca:	09 f4       	brne	.+2      	; 0x9ce <__ultoa_invert+0x48>
 9cc:	68 94       	set
 9ce:	3f 91       	pop	r19
 9d0:	2a e0       	ldi	r18, 0x0A	; 10
 9d2:	26 9f       	mul	r18, r22
 9d4:	11 24       	eor	r1, r1
 9d6:	30 19       	sub	r19, r0
 9d8:	30 5d       	subi	r19, 0xD0	; 208
 9da:	31 93       	st	Z+, r19
 9dc:	de f6       	brtc	.-74     	; 0x994 <__ultoa_invert+0xe>
 9de:	cf 01       	movw	r24, r30
 9e0:	08 95       	ret
 9e2:	46 2f       	mov	r20, r22
 9e4:	47 70       	andi	r20, 0x07	; 7
 9e6:	40 5d       	subi	r20, 0xD0	; 208
 9e8:	41 93       	st	Z+, r20
 9ea:	b3 e0       	ldi	r27, 0x03	; 3
 9ec:	0f d0       	rcall	.+30     	; 0xa0c <__ultoa_invert+0x86>
 9ee:	c9 f7       	brne	.-14     	; 0x9e2 <__ultoa_invert+0x5c>
 9f0:	f6 cf       	rjmp	.-20     	; 0x9de <__ultoa_invert+0x58>
 9f2:	46 2f       	mov	r20, r22
 9f4:	4f 70       	andi	r20, 0x0F	; 15
 9f6:	40 5d       	subi	r20, 0xD0	; 208
 9f8:	4a 33       	cpi	r20, 0x3A	; 58
 9fa:	18 f0       	brcs	.+6      	; 0xa02 <__ultoa_invert+0x7c>
 9fc:	49 5d       	subi	r20, 0xD9	; 217
 9fe:	31 fd       	sbrc	r19, 1
 a00:	40 52       	subi	r20, 0x20	; 32
 a02:	41 93       	st	Z+, r20
 a04:	02 d0       	rcall	.+4      	; 0xa0a <__ultoa_invert+0x84>
 a06:	a9 f7       	brne	.-22     	; 0x9f2 <__ultoa_invert+0x6c>
 a08:	ea cf       	rjmp	.-44     	; 0x9de <__ultoa_invert+0x58>
 a0a:	b4 e0       	ldi	r27, 0x04	; 4
 a0c:	a6 95       	lsr	r26
 a0e:	97 95       	ror	r25
 a10:	87 95       	ror	r24
 a12:	77 95       	ror	r23
 a14:	67 95       	ror	r22
 a16:	ba 95       	dec	r27
 a18:	c9 f7       	brne	.-14     	; 0xa0c <__ultoa_invert+0x86>
 a1a:	00 97       	sbiw	r24, 0x00	; 0
 a1c:	61 05       	cpc	r22, r1
 a1e:	71 05       	cpc	r23, r1
 a20:	08 95       	ret
 a22:	9b 01       	movw	r18, r22
 a24:	ac 01       	movw	r20, r24
 a26:	0a 2e       	mov	r0, r26
 a28:	06 94       	lsr	r0
 a2a:	57 95       	ror	r21
 a2c:	47 95       	ror	r20
 a2e:	37 95       	ror	r19
 a30:	27 95       	ror	r18
 a32:	ba 95       	dec	r27
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__ultoa_invert+0xa2>
 a36:	62 0f       	add	r22, r18
 a38:	73 1f       	adc	r23, r19
 a3a:	84 1f       	adc	r24, r20
 a3c:	95 1f       	adc	r25, r21
 a3e:	a0 1d       	adc	r26, r0
 a40:	08 95       	ret

00000a42 <__prologue_saves__>:
 a42:	2f 92       	push	r2
 a44:	3f 92       	push	r3
 a46:	4f 92       	push	r4
 a48:	5f 92       	push	r5
 a4a:	6f 92       	push	r6
 a4c:	7f 92       	push	r7
 a4e:	8f 92       	push	r8
 a50:	9f 92       	push	r9
 a52:	af 92       	push	r10
 a54:	bf 92       	push	r11
 a56:	cf 92       	push	r12
 a58:	df 92       	push	r13
 a5a:	ef 92       	push	r14
 a5c:	ff 92       	push	r15
 a5e:	0f 93       	push	r16
 a60:	1f 93       	push	r17
 a62:	cf 93       	push	r28
 a64:	df 93       	push	r29
 a66:	cd b7       	in	r28, 0x3d	; 61
 a68:	de b7       	in	r29, 0x3e	; 62
 a6a:	ca 1b       	sub	r28, r26
 a6c:	db 0b       	sbc	r29, r27
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	cd bf       	out	0x3d, r28	; 61
 a78:	09 94       	ijmp

00000a7a <__epilogue_restores__>:
 a7a:	2a 88       	ldd	r2, Y+18	; 0x12
 a7c:	39 88       	ldd	r3, Y+17	; 0x11
 a7e:	48 88       	ldd	r4, Y+16	; 0x10
 a80:	5f 84       	ldd	r5, Y+15	; 0x0f
 a82:	6e 84       	ldd	r6, Y+14	; 0x0e
 a84:	7d 84       	ldd	r7, Y+13	; 0x0d
 a86:	8c 84       	ldd	r8, Y+12	; 0x0c
 a88:	9b 84       	ldd	r9, Y+11	; 0x0b
 a8a:	aa 84       	ldd	r10, Y+10	; 0x0a
 a8c:	b9 84       	ldd	r11, Y+9	; 0x09
 a8e:	c8 84       	ldd	r12, Y+8	; 0x08
 a90:	df 80       	ldd	r13, Y+7	; 0x07
 a92:	ee 80       	ldd	r14, Y+6	; 0x06
 a94:	fd 80       	ldd	r15, Y+5	; 0x05
 a96:	0c 81       	ldd	r16, Y+4	; 0x04
 a98:	1b 81       	ldd	r17, Y+3	; 0x03
 a9a:	aa 81       	ldd	r26, Y+2	; 0x02
 a9c:	b9 81       	ldd	r27, Y+1	; 0x01
 a9e:	ce 0f       	add	r28, r30
 aa0:	d1 1d       	adc	r29, r1
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	f8 94       	cli
 aa6:	de bf       	out	0x3e, r29	; 62
 aa8:	0f be       	out	0x3f, r0	; 63
 aaa:	cd bf       	out	0x3d, r28	; 61
 aac:	ed 01       	movw	r28, r26
 aae:	08 95       	ret

00000ab0 <_exit>:
 ab0:	f8 94       	cli

00000ab2 <__stop_program>:
 ab2:	ff cf       	rjmp	.-2      	; 0xab2 <__stop_program>
